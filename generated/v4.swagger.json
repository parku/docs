{
    "swagger": "2.0",
    "info": {
        "title": "Parku API v4 Reference",
        "version": "",
        "description": "The parku API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use\nHTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs,\nwhich can be understood by off-the-shelf HTTP clients. JSON will be returned in all responses from the API,\nincluding errors.\n\n#### Versions\n\n- previous: __v4__\n\n- latest stable: [v5](v5.html)\n\n#### Api definition files\n\n- [Swagger definition](generated/v4.swagger.json) (readable by [Postman](https://www.getpostman.com/))\n\n- [Api Blueprint](generated/v4.apib)"
    },
    "host": "sandbox.test.parku.io",
    "basePath": "/v4",
    "schemes": [
        "https"
    ],
    "paths": {
        "/attributes": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 32,
                                "key": "adac",
                                "value": "12345"
                            }
                        }
                    }
                },
                "summary": "Create a new Attribute",
                "description": "",
                "tags": [
                    "Attributes"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "The name of the attribute. Currently only 'adac' and 'test' are allowed"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value of the attribute, eg. a membership number"
                                }
                            },
                            "required": [
                                "key",
                                "value"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/attributes/{attribute_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 32,
                                "key": "adac",
                                "value": "12345"
                            }
                        }
                    }
                },
                "summary": "Retrieve an Attribute",
                "description": "",
                "tags": [
                    "Attributes"
                ],
                "parameters": [
                    {
                        "name": "attribute_id",
                        "in": "path",
                        "description": "The identifier of the attribute to be retrieved",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/bookings": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "List all bookings",
                "description": "",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned.\nCount can range between 1 and 100 items.\n",
                        "required": false,
                        "type": "number",
                        "default": 10
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "An offset into the list of returned items.\nThe API will return the requested number of items starting at that offset.\n",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "name": "date_start",
                        "in": "query",
                        "description": "Filter bookings, shows past bookings.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "past"
                        ]
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "Filter bookings, shows past bookings.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "future"
                        ]
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter bookings for status.",
                        "required": false,
                        "type": "string",
                        "default": "all",
                        "enum": [
                            "all",
                            "active",
                            "cancelled"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": "005c4826-4e28-11e3-a675-d43d7eece53d",
                                "license_plate": "B-AB 1234",
                                "phone_number": "+493057701872",
                                "location": {
                                    "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                                    "code": "ZHRTHW",
                                    "latitude": 47.365398,
                                    "longitude": 8.51987,
                                    "street": "Hopfenstrasse",
                                    "street_number": "20",
                                    "postcode": "8045",
                                    "city": "Zürich",
                                    "country": "CH",
                                    "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                                    "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                                    "image_urls": [
                                        "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                                        "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                                    ],
                                    "options": [],
                                    "notifications": [],
                                    "currency": "CHF",
                                    "pricing": {
                                        "rate_hourly": 2,
                                        "rate_daily": 10,
                                        "rate_weekly": null,
                                        "rate_monthly": null
                                    },
                                    "support": {
                                        "phone_number": "+41 43 928 72 52"
                                    },
                                    "address_slug": "hopfenstrasse-20",
                                    "user_owned": false,
                                    "settings": {
                                        "bookable_range_start": -15,
                                        "bookable_range_end": 43200,
                                        "booking_duration_min": 30,
                                        "booking_duration_max": 43200
                                    },
                                    "required_fields": [
                                        "additional_services",
                                        "car_colour",
                                        "number_of_passengers"
                                    ],
                                    "gates": [
                                        {
                                            "type": "beacon",
                                            "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                                            "gateways": [
                                                {
                                                    "type": "box",
                                                    "name": "PRK-123"
                                                },
                                                {
                                                    "type": "api"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "qrcode",
                                            "identifier": "PARKU3KU",
                                            "gateways": [
                                                {
                                                    "type": "api"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "reference": "HRS5J",
                                "date_start": "2016-10-27T10:00:00+0000",
                                "date_end": "2016-10-27T16:30:00+0000",
                                "price": 13.75,
                                "currency": "CHF",
                                "violation": null
                            }
                        }
                    }
                },
                "summary": "Create a new Booking",
                "description": "",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "location_id": {
                                    "type": "string",
                                    "description": "The ID of the location you get returned from the locations request"
                                },
                                "date_start": {
                                    "type": "string",
                                    "description": "start date and time of the booking"
                                },
                                "date_end": {
                                    "type": "string",
                                    "description": "end date and time of the booking"
                                },
                                "license_plate": {
                                    "type": "string",
                                    "description": "The license plate of the used car.\n\nGet all cars of a user from the [cars](#user-cars-get) request."
                                },
                                "phone_number": {
                                    "type": "string",
                                    "description": "The phone number.\n\nGet all phone numbers of a user from the [phone_numbers](`#user-phone_numbers-get`) request."
                                },
                                "provider": {
                                    "type": "string",
                                    "enum": [
                                        "paypal",
                                        "credit",
                                        "braintree"
                                    ],
                                    "description": "The payment method."
                                },
                                "provider_info": {
                                    "type": "string",
                                    "description": "The information of the payment provider to perform a payment.  Required for `paypal` and `braintree`.\n\nThe field `provider_info` should contain required payment information.\nTypically you just forward the info from your request to the payment provider into this field.\n\n* **PayPal**\n    You can either use the complete PayPal response or just add the payment ID: provider_info=PAY-1CM399047K4649003KM4WJQQ\n\n* **Braintree**\n    There are two ways to pay with braintree:\n    1. _CreditCard-ID_\n\n        Retrieve the Card ID through the payment endpoint and add it to the request:\n\n        ```\n        provider_info[id]=gphsyb\n        ```\n    2. _CreditCard Credentials_\n\n        ```\n        provider_info[number]=EncryptedCreditCardNumber\n        provider_info[expiration_date]=EncryptedExpirationDate\n        provider_info[cvv]=EncryptedCvv\n        ```"
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "all",
                                        "active",
                                        "cancelled"
                                    ],
                                    "default": "all",
                                    "description": "Get bookings by status."
                                },
                                "required_field": {
                                    "type": "object",
                                    "properties": {
                                        "car_color": {
                                            "type": "string",
                                            "description": "the car color"
                                        },
                                        "number_of_passengers": {
                                            "type": "string",
                                            "description": "the number of passengers"
                                        }
                                    },
                                    "description": "Parking space required fields defined in the locations request. The required fields should contain all required fields defined in location. All values should be sent as strings."
                                }
                            },
                            "required": [
                                "location_id",
                                "date_start",
                                "date_end",
                                "license_plate",
                                "phone_number",
                                "provider"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/bookings/{reference}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": "005c4826-4e28-11e3-a675-d43d7eece53d",
                                "license_plate": "B-AB 1234",
                                "phone_number": "+493057701872",
                                "location": {
                                    "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                                    "code": "ZHRTHW",
                                    "latitude": 47.365398,
                                    "longitude": 8.51987,
                                    "street": "Hopfenstrasse",
                                    "street_number": "20",
                                    "postcode": "8045",
                                    "city": "Zürich",
                                    "country": "CH",
                                    "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                                    "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                                    "image_urls": [
                                        "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                                        "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                                    ],
                                    "options": [],
                                    "notifications": [],
                                    "currency": "CHF",
                                    "pricing": {
                                        "rate_hourly": 2,
                                        "rate_daily": 10,
                                        "rate_weekly": null,
                                        "rate_monthly": null
                                    },
                                    "support": {
                                        "phone_number": "+41 43 928 72 52"
                                    },
                                    "address_slug": "hopfenstrasse-20",
                                    "user_owned": false,
                                    "settings": {
                                        "bookable_range_start": -15,
                                        "bookable_range_end": 43200,
                                        "booking_duration_min": 30,
                                        "booking_duration_max": 43200
                                    },
                                    "gates": [
                                        {
                                            "type": "beacon",
                                            "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                                            "gateways": [
                                                {
                                                    "type": "box",
                                                    "name": "PRK-123"
                                                },
                                                {
                                                    "type": "api"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "qrcode",
                                            "identifier": "PARKU3KU",
                                            "gateways": [
                                                {
                                                    "type": "api"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "reference": "HRS5J",
                                "date_start": "2016-10-27T10:00:00+0000",
                                "date_end": "2016-10-27T16:30:00+0000",
                                "price": 13.75,
                                "currency": "CHF",
                                "violation": {
                                    "license_plate": "B-DC 4321",
                                    "comment": "This car parked on my parking space!!!",
                                    "image_url": "https://parku.ch/images/reports/12.jpeg"
                                },
                                "extend": [
                                    {
                                        "date_start": "2016-10-27T10:00:00+0000",
                                        "date_end": "2016-10-27T16:30:00+0000",
                                        "price": 1.25,
                                        "currency": "CHF"
                                    },
                                    {
                                        "date_start": "2016-10-27T10:00:00+0000",
                                        "date_end": "2016-10-27T17:30:00+0000",
                                        "price": 2.5,
                                        "currency": "CHF"
                                    },
                                    {
                                        "date_start": "2016-10-27T10:00:00+0000",
                                        "date_end": "2016-10-27T18:30:00+0000",
                                        "price": 5,
                                        "currency": "CHF"
                                    },
                                    {
                                        "date_start": "2016-10-27T10:00:00+0000",
                                        "date_end": "2016-10-27T19:30:00+0000",
                                        "price": 7.5,
                                        "currency": "CHF"
                                    },
                                    {
                                        "date_start": "2016-10-27T10:00:00+0000",
                                        "date_end": "2016-10-27T21:30:00+0000",
                                        "price": 7.5,
                                        "currency": "CHF"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Retrieve a Booking",
                "description": "Retrieves the details of an existing booking. You need to supply either the id or the reference of a booking.",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "The id or code of the booking",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/bookings/{booking_id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Update a Booking",
                "description": "Updates the booking by setting the values of the parameters passed. Any parameter not provided will be left unchanged.",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "the booking id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "license_plate",
                        "in": "query",
                        "description": "\nrefer to the description of [`Create a new Booking`](#bookings-bookings-post)\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "phone_number",
                        "in": "query",
                        "description": "\nrefer to the description of [`Create a new Booking`](#bookings-bookings-post)\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "\nrefer to the description of [`Create a new Booking`](#bookings-bookings-post)\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "\nrefer to the description of [`Create a new Booking`](#bookings-bookings-post)\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "provider_info",
                        "in": "query",
                        "description": "\nrefer to the description of [`Create a new Booking`](#bookings-bookings-post)\n",
                        "required": false,
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Cancel a Booking",
                "description": "",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "the booking id",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/bookings/{booking_id}/extend": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "date_start": "2016-10-27T10:00:00+0000",
                                "date_end": "2016-10-27T17:45:00+0000",
                                "price": 3.15,
                                "currency": "CHF"
                            }
                        }
                    }
                },
                "summary": "Retrieve Custom Extend Prices",
                "description": "Retrieving a booking returns a few prices for standard intervals. Use this endpoint for custom intervals.",
                "tags": [
                    "Bookings"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "the booking id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "end date and time of the booking",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/cars": {
            "get": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "List all cars",
                "description": "Returns a list of all cars of the user. The cars are returned sorted by creation date,\nwith the most recently created car appearing first.",
                "tags": [
                    "Cars"
                ],
                "parameters": []
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 23,
                                "license_plate": "B-AB 1234",
                                "vehicle": "Isetta",
                                "country": "DE"
                            }
                        }
                    }
                },
                "summary": "Create a new Car",
                "description": "You can store multiple cars for a user.",
                "tags": [
                    "Cars"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "license_plate": {
                                    "type": "string",
                                    "description": "The license plate for the stored car."
                                },
                                "vehicle": {
                                    "type": "string",
                                    "description": "A name for the car to be identified easier."
                                },
                                "country": {
                                    "type": "string",
                                    "enum": [
                                        "DE",
                                        "CH"
                                    ],
                                    "description": "The country code the license plate."
                                }
                            },
                            "required": [
                                "license_plate"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/cars/{car_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 23,
                                "license_plate": "B-AB 1234",
                                "vehicle": "Isetta",
                                "country": "DE"
                            }
                        }
                    }
                },
                "summary": "Retrieve a Car",
                "description": "",
                "tags": [
                    "Cars"
                ],
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "The identifier of the car to be retrieved",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 23,
                                "license_plate": "B-AB 1234",
                                "vehicle": "Polo",
                                "country": "DE"
                            }
                        }
                    }
                },
                "summary": "Update a Car",
                "description": "Updates the car by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
                "tags": [
                    "Cars"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "car_id": {
                                    "type": "number",
                                    "description": "The identifier of the car to be updated."
                                },
                                "license_plate": {
                                    "type": "string",
                                    "description": "The license plate for the stored car."
                                },
                                "vehicle": {
                                    "type": "string",
                                    "description": "A name for the car to be identified easier."
                                },
                                "country": {
                                    "type": "string",
                                    "enum": [
                                        "DE",
                                        "CH"
                                    ],
                                    "description": "The country code the license plate."
                                }
                            },
                            "required": [
                                "car_id",
                                "license_plate"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Delete a Car",
                "description": "",
                "tags": [
                    "Cars"
                ],
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "The identifier of the car to be deleted.",
                        "required": true,
                        "type": "number"
                    }
                ]
            }
        },
        "/coupon/{encoded_code}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "|           |                                         |\n|-----------|-----------------------------------------|\n| code      | `string` Decoded, sanitized coupon code |\n| value     | `number` Coupons value                  |\n| deduction | `number` Amount used of coupon value    |",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "code": "foobar123",
                                "value": 10,
                                "deduction": 10
                            }
                        }
                    },
                    "404": {
                        "description": "| Code |                                         Description                                         |\n|------|---------------------------------------------------------------------------------------------|\n| 20   | Coupon not found.                                                                           |\n| 21   | Coupon is inactive.                                                                         |\n| 22   | Coupon expired.                                                                             |\n| 23   | Coupon date (start or end) prohibit coupon usage.                                           |",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "errors": [
                                    {
                                        "field": "coupon",
                                        "code": 20,
                                        "message": "Coupon not found."
                                    }
                                ]
                            }
                        }
                    },
                    "422": {
                        "description": "| Code |                                         Description                                         |\n|------|---------------------------------------------------------------------------------------------|\n| 10   | \"amount\" is faulty, probably below 0.                                                       |\n| 30   | Coupon quota exhausted.                                                                     |\n| 31   | User usage quota for this coupon is exhausted.                                              |\n| 32   | User usage quota for a coupon is same grouping is exhausted.                                |\n| 40   | Platform (Android, iOS, web) is not enabled. Some coupons only work on specific a platform. |",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "errors": [
                                    {
                                        "field": "coupon",
                                        "code": 31,
                                        "message": "Coupon usage exceeded."
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Test a Coupon",
                "description": "",
                "tags": [
                    "Coupon"
                ],
                "parameters": [
                    {
                        "name": "encoded_code",
                        "in": "path",
                        "description": "A base64url encoded coupon code string.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "Action to do.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "test"
                        ]
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "Amount coupon has to be tested against.",
                        "required": true,
                        "type": "number"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/devices": {
            "post": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Create an Identifier",
                "description": "Send the latest device identifier to the backend.\n\nThe iOS device token can change through time.\n[Apple suggests](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW2)\nto send the device token every time the app launches.",
                "tags": [
                    "Devices"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "ios_device_token": {
                                    "type": "string",
                                    "description": "iOS push notification identifier via APNs.\n\nFull integration and how to request a push notification Device Token through Apple's APM service is accessible\n[here](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html).\nDevice Token may be raw format or in push format."
                                },
                                "android_registration_id": {
                                    "type": "string",
                                    "description": "Android push notification identifier via GCM.\n\nFull integration and how to request a push notification Registration ID through Android's GCM service is\naccessible [here](http://developer.android.com/google/gcm/gs.html)."
                                }
                            }
                        }
                    }
                ]
            }
        },
        "/facebook/login": {
            "post": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Facebook Login",
                "description": "When a new user was created through Facebook, the country is not set.\nIn this case, you must ask the user for the country and [update](#user-user-put) the user profile accordingly.\n\nAll further requests using the token as _HTTP Basic Auth_ username are made on behalf of the user.",
                "tags": [
                    "Facebook"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string",
                                    "description": "The access token which is used to obtain information from Facebook.\n\nThe token must have the permissions to get the users email."
                                }
                            },
                            "required": [
                                "access_token"
                            ]
                        }
                    }
                ]
            }
        },
        "/invitations/{invitation_code}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "|       |                                                                   |\n|-------|-------------------------------------------------------------------|\n| valid | `bool` _true_, if the invitation code is valid, _false_ otherwise |",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "valid": true
                            }
                        }
                    }
                },
                "summary": "Check Invitation Code Validity",
                "description": "",
                "tags": [
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "invitation_code",
                        "in": "path",
                        "description": "Base64 encoded invitation code.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/locations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "List Locations",
                "description": "Returns a list of locations that provide the same format as the single location.\nWhen no `date_start` or `date_end` was provided, all locations are returned.\nThat does not mean, that they are available.\n\nSome of the locations do not show all the location details in this request. A special flag `has_live_details` defines\nif a second request has to be done to retrieve valid location details like description, price and availability.\nIf `has_live_details` is `true`, a request to the single location with the corresponding id has to be made before\nbooking the location. If `has_live_details` is true, the list request will have an `availability.current` of `null` and\na `price` of `null` as well as an empty `description` and `additional fields`.",
                "tags": [
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "sw",
                        "in": "query",
                        "description": "Comma separated latitude and longitude of the southwest position.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ne",
                        "in": "query",
                        "description": "Comma separated latitude and longitude of the northeast position.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_start",
                        "in": "query",
                        "description": "10-27T09:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the start date.\n`date_start` will have no effect unless `date_end` is also provided.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "10-27T10:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the end date.\n`date_end` will have no effect unless `date_start` is also provided.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "Filters returned locations regarding their availability if start and end\nare also given.\n\n* `true` only returns available locations\n    (this is default if availability is not specified and start and end were given)\n\n* `false` only returns non-available locations\n\n* `all` return all locations, including ones that no availability information is available for",
                        "required": false,
                        "type": "string",
                        "default": "true",
                        "enum": [
                            "true",
                            "false",
                            "all"
                        ]
                    },
                    {
                        "name": "bookability",
                        "in": "query",
                        "description": "Filters returned locations regarding their general bookability.\n\n* `true` only returns locations that could be booked through the api if they are available\n\n* `false` only returns locations that can not be booked through the api, even though they might be available\n\n* `all` return all locations, no matter if they would be bookable though the API or not",
                        "required": false,
                        "type": "string",
                        "default": "true",
                        "enum": [
                            "true",
                            "false",
                            "all"
                        ]
                    }
                ]
            }
        },
        "/locations/{location_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "| Field                         | Description                                                                                                                                                                                                                          |\n| -----------------             | --------------------------------------------------------------------------------------                                                                                                                                               |\n| address_slug                  | `string` street name and number of the location in url address format                                                                                                                                                                |\n| availability                  | `dictionary` describes the availability of the location in relation to the request                                                                                                                                                   |\n| availability.current          | `number` the number of parking spaces available at the location for the requested time period defined by `start` and `end`                                                                                                           |\n| availability.maximum          | `number` the overall number of parking spaces at this location                                                                                                                                                                       |\n| availability.next_start       | `time` the start of the next from now slot in which a parking space in this location is free and bookable, can be in the past                                                                                                        |\n| availability.next_end         | `time` the end of the next slot from now in which a parking space in this location is free and bookable, can be in the past                                                                                                          |\n| bookable                      | `boolean` `true` if that locations can be booked via the parku API, `false` if the location is purely providing information                                                                                                          |\n| city                          | `string` city of the location                                                                                                                                                                                                        |\n| code                          | `string` short identification code of the location, not necessarily unique                                                                                                                                                           |\n| country                       | `string` country of the location in 2 character encoding                                                                                                                                                                             |\n| currency                      | `string` the currency that the price for the location is in, `EUR` for Euro or `CHF` for swiss franc.                                                                                                                                |\n| description                   | `string` the description of the location. The description is returned in the users language or in the language specified by the HTTP header `Accept-Language` if it was given.                                                       |\n| id                            | `uuid rfc4122` unique identifier of the location used for referencing.                                                                                                                                                               |\n| image_urls                    | `list` urls of location images, can be **empty**                                                                                                                                                                                     |\n| has_live_details              | `boolean` if `true` for booking a request to the single location endpoint has to be made to retrieve valid location details (price, availability, description, additional fields)\n|\n| latitude                      | `decimal` latitude part of the location geo coordinate                                                                                                                                                                               |\n| longitude                     | `decimal` longitude part of the location geo                                                                                                                                                                                         |\n| notification                  | `list` *deprecated* usually empty, ignore                                                                                                                                                                                            |\n| options                       | `list` describes which options are available at the location and can contains each of the following elements. The list can be **empty**.                                                                                             |\n| options[excess length]        | the parking space can be used by cars with a small trailer                                                                                                                                                                           |\n| options[indoor]               | the parking space has a roof or can be an underground garage                                                                                                                                                                         |\n| options[disabled]             | parking space is accessible for disabled people                                                                                                                                                                                      |\n| options[patio]                | the parking space is located at an inner courtyard                                                                                                                                                                                   |\n| options[barrier]              | parking space has a barrier and user needs a smartphone to open it                                                                                                                                                                   |\n| options[charging station]     | parking space with an electric vehicle charging station                                                                                                                                                                              |\n| options[key_necessary]        | parking space can only be accessed with a key                                                                                                                                                                                        |\n| options[long_term_booking]    | parking space is bookable for longer time period                                                                                                                                                                                     |\n| options[surveillance]         | parking space has surveillance                                                                                                                                                                                                       |\n| options[valet_service]        | parking space contains valet service                                                                                                                                                                                                 |\n| price                         | `decimal` the actual price shown to the user, can be **null** if `start` or `end` were not provided                                                                                                                                  |\n| price_period                  | `string` contains the period for how long the price is valid, can be `day`, `week`, `month`, `timeframe`, can be **null** if `start` or `end` was not provided                                                                       |\n| pricing                       | `dictionary` contains information about the pricing and price prediction. It contains the keys                                                                                                                                       |\n| pricing.rate_hourly           | `decimal` shows the price for per hour                                                                                                                                                                                               |\n| pricing.rate_daily            | `decimal` shows the price per day                                                                                                                                                                                                    |\n| pricing.rate_weekly           | `decimal` shows the price per week                                                                                                                                                                                                   |\n| pricing.rate_monthly          | `decimal` shows the price per month                                                                                                                                                                                                  |\n| post_code                     | `string` post code of the location                                                                                                                                                                                                   |\n| provider                      | `string` names the parking space provider. Additional information(terms and conditions, logo, ...) about the provider can found be using the provider key from the field in [settings](/api/settings/)                               |\n| required_fields               | `list` lists all additionally required fields when creating a booking for this location, can be **empty** if no fields are required. The field names correspond to the `booking.fields.*` entries in the settings endpoint which can |\n|                               | be used for retrieving translated strings for these fields.                                                                                                                                                                          |\n| settings                      | `dictionary` provides booking requirements for the location. The settings of a location are used in favor of the global settings that can be found in the settings endpoint.                                                         |\n| settings.bookable_range_start | `number` start of the range wherein a booking is allowed in minutes from now.                                                                                                                                                        |\n| settings.bookable_range_end   | `number` end of the range wherein a booking is allowed in minutes from now.                                                                                                                                                          |\n| settings.booking_duration_min | `number` minimum duration of a booking in minutes.                                                                                                                                                                                   |\n| settings.booking_duration_max | `number` maximum duration of a booking in minutes.                                                                                                                                                                                   |\n| street                        | `string` the street name of the location without number                                                                                                                                                                              |\n| street_number                 | `string` the street number of the location                                                                                                                                                                                           |\n| support                       | `dictionary` contains field `phone_number` that returns the support center phone number for this location                                                                                                                            |\n| type                          | `string` describes the type of location and can be one of the following. Choices `off-street` `park-and-ride` `professional-garage` `airport-parking` `harbor-parking`                                                               |\n| user_owned                    | `boolean` `true` if the user who requested the location is also the owner of the parking space. This allows to determine if the user could block the parking space from bookings. The blocking feature itself is not yet             |",
                        "headers": {},
                        "examples": {}
                    },
                    "404": {
                        "description": "Location was not found, check the location id and that your user has the correct access rights to see the location.",
                        "headers": {},
                        "examples": {}
                    },
                    "422": {
                        "description": "Request validation failed because the request data was malformed.",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Retrieve a Location",
                "description": "",
                "tags": [
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "location_id",
                        "in": "path",
                        "description": "Identifier of the location.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_start",
                        "in": "query",
                        "description": "Used to calculate the price for a location.\nRequires the field `date_end` to be defined. If no `date_start` or `date_end` is specified,\nthe returned `price` field will be `null`.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "\nsee `date_start`.\n",
                        "required": false,
                        "type": "string"
                    }
                ]
            }
        },
        "/locations/{location_id}/availability": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Displays the availability times. For every affected availability period there will be one entry in the json.\nThis sub json contains 9 keys, one for every weekday including the day's times and also the period start and end.\n\n__Caution__: This does not include bookings\n\nA period is affected, if one of the following holds:\n\n* `date_start` is between period start and period end\n\n* `date_end` is between period start and end\n\n* `date_start` and `date_end` overlay the period",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Get availability times for location",
                "description": "",
                "tags": [
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "location_id",
                        "in": "path",
                        "description": "Identifier of the location.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_start",
                        "in": "query",
                        "description": "10-27T09:10:20+00:00 (ISO 8601, optional) - Start of time frame to include periods.\nIf `date_start` is provided, `date_end` is required and vice versa.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_end",
                        "in": "query",
                        "description": "10-27T10:10:20+00:00 (ISO 8601, optional)\nsee `date_start`.\n",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/locations/{location_id}/terms": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/xhtml+xml": "<!DOCTYPE html>\n  <html xmlns=\"http://www.w3.org/1999/xhtml\"...\n"
                        }
                    }
                },
                "summary": "Retrieve Terms and Conditions",
                "description": "__Deprecated__ This endpoint is deprecated. `/settings` endpoint should be used instead.\n\nEach location can have different terms and conditions.\nWith this endpoint you can retrieve location based terms and conditions.",
                "tags": [
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "location_id",
                        "in": "path",
                        "description": "Identifier of the location.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xhtml+xml"
                ]
            }
        },
        "/login": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Login",
                "description": "Checks the given credentials email and password for validity.\nReturns the user object with a user token needed for private endpoints. A public key is needed.\nAll further requests using the token as HTTP Basic Auth username are made on behalf of the user.\n\nLogin through Facebook is described in a separate endpoint.",
                "tags": [
                    "Login"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "email",
                                "password"
                            ],
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "/password": {
            "put": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Update password",
                "description": "Access needs a __private key__.",
                "tags": [
                    "Password"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "old_password",
                                "new_password"
                            ],
                            "properties": {
                                "old_password": {
                                    "type": "string"
                                },
                                "new_password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "get": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    },
                    "404": {
                        "description": "The given email address is not found in the database.",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Reset password",
                "description": "Access needs a __public key__.\n\nThis sends an email with the newly set password to the users email address.",
                "tags": [
                    "Password"
                ],
                "parameters": [
                    {
                        "name": "for",
                        "in": "query",
                        "description": "A valid email address of the user.",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/payment/creditcards": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": [
                                {
                                    "id": "gphsyb",
                                    "type": "Visa",
                                    "number": "400934******1881",
                                    "expiration_date": "05/2020",
                                    "image_url": "https://assets.braintreegateway.com/payment_method_logo/visa.png?environment=sandbox&merchant_id=8fbxty8dhjmy8g4j"
                                },
                                {
                                    "id": "6tvts6",
                                    "type": "Visa",
                                    "number": "411111******1111",
                                    "expiration_date": "01/2014",
                                    "image_url": "https://assets.braintreegateway.com/payment_method_logo/visa.png?environment=sandbox&merchant_id=8fbxty8dhjmy8g4j"
                                }
                            ]
                        }
                    }
                },
                "summary": "List Credit Cards",
                "description": "Shows all credit cards the user used before.",
                "tags": [
                    "Payment"
                ],
                "parameters": [],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/payment/credit_cards/{credit_card_id}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Delete a Credit Card",
                "description": "",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "name": "credit_card_id",
                        "in": "path",
                        "description": "The identifier of the credit card to delete.\nYou'll receive a list of the users credit cards through the `GET /payment/creditcards` request.\n",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/payment/credit": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "gender": "female",
                                "email": "test@example.com",
                                "firstname": "Test",
                                "lastname": "Name",
                                "credit": 10,
                                "currency": "EUR",
                                "country": "DE",
                                "facebook_id": null,
                                "token": "098f6bcd4621d373cade4e832627b4f6"
                            }
                        }
                    }
                },
                "summary": "Update Credit",
                "description": "__Deprecated__: this will be removed in __v5__.",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "amount",
                                "provider",
                                "provider_info"
                            ],
                            "properties": {
                                "amount": {
                                    "type": "number"
                                },
                                "provider": {
                                    "type": "string",
                                    "enum": [
                                        "paypal",
                                        "braintree"
                                    ]
                                },
                                "provider_info": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/phone_numbers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "List all Phone Numbers",
                "description": "Returns a list of all phone numbers of the user.\nThe phone numbers are returned sorted by creation date, with the most recently created phone number appearing first.",
                "tags": [
                    "Phone Numbers"
                ],
                "parameters": []
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": "151",
                                "phone_number": "+493057701873"
                            }
                        }
                    }
                },
                "summary": "Create a New Phone Number",
                "description": "You can store multiple phone numbers for a user.\n\n#### Body Parameters",
                "tags": [
                    "Phone Numbers"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "phone_number": {
                                    "type": "string",
                                    "description": "The phone number."
                                }
                            },
                            "required": [
                                "phone_number"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/phone_numbers/{phone_number_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 151,
                                "phone_number": "+493057701873"
                            }
                        }
                    }
                },
                "summary": "Retrieve a Phone Number",
                "description": "",
                "tags": [
                    "Phone Numbers"
                ],
                "parameters": [
                    {
                        "name": "phone_number_id",
                        "in": "path",
                        "description": "The identifier of the phone number to be retrieved.",
                        "required": true,
                        "type": "number"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "id": 151,
                                "phone_number": "+493057701874"
                            }
                        }
                    }
                },
                "summary": "Update a Phone Number",
                "description": "#### Body Parameters",
                "tags": [
                    "Phone Numbers"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "phone_number_id": {
                                    "type": "number",
                                    "description": "The identifier of the phone number to be updated."
                                }
                            },
                            "required": [
                                "phone_number_id"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Delete a Phone Number",
                "description": "",
                "tags": [
                    "Phone Numbers"
                ],
                "parameters": [
                    {
                        "name": "phone_number_id",
                        "in": "path",
                        "description": "The identifier of the phone number to be deleted.",
                        "required": true,
                        "type": "number"
                    }
                ]
            }
        },
        "/sesam/{sesam_id}": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Everything went fine. The gate/barrier connected to the sesam device should open in the next few seconds.",
                        "headers": {},
                        "examples": {}
                    },
                    "401": {
                        "description": "The code is valid, but the user does not have the permissions to use this sesam device.\nEither no booking is made or the time for opening the sesam has expired.",
                        "headers": {},
                        "examples": {}
                    },
                    "404": {
                        "description": "The QR code is not valid. Either it is not a parku QR code or the QR code is outdated.",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Open Sesam",
                "description": "",
                "tags": [
                    "Sesam"
                ],
                "parameters": [
                    {
                        "name": "sesam_id",
                        "in": "path",
                        "description": "The sesam ID which is hidden in the QR code.",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/sesam": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returned if a booking with a sesam device is available.",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "support": {
                                    "phone_number": {
                                        "phone_number": "+49 123 456 789"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No booking with a sesam device available.",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Check Sesam",
                "description": "This endpoint gives you the information whether the user can open a sesam device now or in the near future.",
                "tags": [
                    "Sesam"
                ],
                "parameters": [],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/settings": {
            "get": {
                "responses": {
                    "200": {
                        "description": "#### Response Fields\n\n|             Field             |                                                                                  Description                                                                                   |\n|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| location                      | provides the booking requirements for a parking space. Every location can have its own settings but these will always be the same or within the limits of the global settings. |\n| location.bookable_range_start | start of the range wherein a booking is allowed in minutes from now.                                                                                                           |\n| location.bookable_range_end   | end of the range wherein a booking is allowed in minutes from now.                                                                                                             |\n| location.booking_duration_min | minimum duration of a booking in minutes.                                                                                                                                      |\n| location.booking_duration_max | maximum duration of a booking in minutes.                                                                                                                                      |\n| sesam                         | contains informations about how to work with the sesam boxes.                                                                                                                  |\n| sesam.connection_trials       | Amount of tries to connect to a sesam box.                                                                                                                                     |\n| sesam.connection_timeout      | Amount of seconds allowed to connect to a box.                                                                                                                                 |\n| sesam.communication_timeout   | Second until canceling the communication with the sesam box.                                                                                                                   |\n| gps                           | contains information on how to handle GPS data.                                                                                                                                |\n| gps.ttl                       | Time-To-Live for previously retrieved GPS data i.e. by operation system                                                                                                        |\n| gps.accuracy                  | Accuracy of GPS data in meters, renders data invalid if exceeded                                                                                                               |\n| booking                       | contains information on how to handle bookings.                                                                                                                                |\n| booking.collection.ttl        | Time-To-Live for previously retrieved booking list                                                                                                                             |\n| booking.notification.*        | List of notifications and their settings. see [Notifications](#header-notifications)                                                                                          |\n| booking.fields.*              | List of additional fields that may be required to make a booking. see [Additional Fields](#header-additional-fields)                                                          |\n| features                      | see [Features](#header-features)                                                                                                                                              |\n| provider                      | see [Provider](#header-provider)                                                                                                                                              |\n\n#### Notifications\n\nEach notification contains an `enabled` flag. If set to `true`, the notification is enabled and should appear. If set to `false`, that notification is disabled.\n|     Field     |                                        Description                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| time_to_leave | _n_ `time_to_leave.minutes` before to leave to get to a booking location.                 |\n| near_location | Entering a region, defined by `near_location.radius` in meters around a booking location. |\n| near_entry    | Entering a region, defined by `near_entry.radius` in meters around a booking location.    |\n| expiring      | Shown _n_ `expiring.minutes` to a bookings ending.                                        |\n| over          | Shown _n_ `over.minutes` to a bookings ending.                                            |\n\n#### Additional Fields\n\nEach additional field uses its name as a key to a dictionary containing the field `label` and `type`.\n`label` contains the translated name of the field.\n The translation of the label is determined by the language of user who is identified by the provided user token.\n\nField types currently are:\n\n* text\n\n* datetime\n\n* date\n\n* time\n\n* number\n\n* tel\n\n* boolean\n\n#### Features\n\nFeature flags that enables or disables certaint features based parameters given in header. These feature flags can be different for each operation systems.\n\n* `recommend_update` _Android specific_: Is enabled if there is a newer version off application that is\n    recommended to be updated. Current version still works.\n\n* `force_update` _Android specific_: Is enabled if current application version is not supported anymore.\n\n#### Provider\n\nInfo for parking space provider. Key is linked with location response field `provider`.\n\n|    Field     |                                             Description                                             |\n|--------------|-----------------------------------------------------------------------------------------------------|\n| image        | Large provider logo.                                                                                |\n| thumbnail    | Provider logo thumbnail.                                                                            |\n| header       | Translated header text for required fields.                                                         |\n| legal        | Contains two lists for terms and conditions entries where you can find text and url for each.       |\n| legal.accept | List of terms and conditions entries which the user needs to accept by some action (like checkbox). |\n| legal.show   | List of terms and conditions entries which the user needs only to see.                              |\n\nIf the list entry `text` contains ``%TERMS_LINK%``, it should be replaced by the actual link (check example).",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Retrieve Settings",
                "description": "This endpoint exposes the global settings for the ParkU-platform.\nChanging the settings is not possible.",
                "tags": [
                    "Settings"
                ],
                "parameters": [
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude of current location.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "lon",
                        "in": "query",
                        "description": "Longitude of current location.",
                        "required": false,
                        "type": "string"
                    }
                ]
            }
        },
        "/settings/booking/notification/{notification_key}": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Updated successfully.",
                        "headers": {},
                        "examples": {}
                    },
                    "304": {
                        "description": "Value of notification was not modified.",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Enable/Disable Notification",
                "description": "#### Body Parameters",
                "tags": [
                    "Settings"
                ],
                "parameters": [
                    {
                        "name": "notification_key",
                        "in": "path",
                        "description": "\nA notification key\n",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "time_to_leave",
                            "near_location",
                            "entry",
                            "expiring",
                            "over"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "The value for the notification key."
                                }
                            },
                            "required": [
                                "enabled"
                            ]
                        }
                    }
                ]
            }
        },
        "/terms": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/xhtml+xml": "<!DOCTYPE html>\n    <html xmlns=\"http://www.w3.org/1999/xhtml\"...\n"
                        }
                    }
                },
                "summary": "Retrieve Terms and Conditions",
                "description": "",
                "tags": [
                    "Static Pages"
                ],
                "parameters": [],
                "produces": [
                    "application/xhtml+xml"
                ]
            }
        },
        "/imprint": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/xhtml+xml": "<!DOCTYPE html>\n    <html xmlns=\"http://www.w3.org/1999/xhtml\"...\n"
                        }
                    }
                },
                "summary": "Retrieve Imprint",
                "description": "",
                "tags": [
                    "Static Pages"
                ],
                "parameters": [],
                "produces": [
                    "application/xhtml+xml"
                ]
            }
        },
        "/privacy_policy": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/xhtml+xml": "<!DOCTYPE html>\n    <html xmlns=\"http://www.w3.org/1999/xhtml\"...\n"
                        }
                    }
                },
                "summary": "Retrieve Privacy Policy",
                "description": "",
                "tags": [
                    "Static Pages"
                ],
                "parameters": [],
                "produces": [
                    "application/xhtml+xml"
                ]
            }
        },
        "/user": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "code": "KFJ32",
                                "gender": "female",
                                "age_range": "26 - 35",
                                "email": "test@example.com",
                                "firstname": "Test",
                                "lastname": "Name",
                                "credit": 0,
                                "currency": "EUR",
                                "country": "DE",
                                "facebook_id": null,
                                "cars": [
                                    {
                                        "id": 12,
                                        "license_plate": "B-AB 1234",
                                        "vehicle": "Isetta",
                                        "country": null
                                    }
                                ],
                                "phone_numbers": [
                                    {
                                        "id": 16696,
                                        "phone_number": "099028-237489"
                                    }
                                ],
                                "attributes": [
                                    {
                                        "id": 1,
                                        "key": "adac",
                                        "value": "1234567890"
                                    }
                                ],
                                "token": "098f6bcd4621d373cade4e832627b4f6"
                            }
                        }
                    }
                },
                "summary": "Create a User",
                "description": "Access needs a __public key__.",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                },
                                "country": {
                                    "type": "string",
                                    "enum": [
                                        "DE",
                                        "CH"
                                    ]
                                },
                                "firstname": {
                                    "type": "string"
                                },
                                "lastname": {
                                    "type": "string"
                                },
                                "gender": {
                                    "type": "string",
                                    "enum": [
                                        "female",
                                        "male"
                                    ]
                                },
                                "age_range": {
                                    "type": "string",
                                    "enum": [
                                        "18 - 25",
                                        "26 - 35",
                                        "36 - 45",
                                        "46+"
                                    ]
                                },
                                "facebook_id": {
                                    "type": "string"
                                },
                                "cars": {
                                    "type": "array"
                                },
                                "phone_numbers": {
                                    "type": "array"
                                },
                                "attributes": {
                                    "type": "array"
                                }
                            },
                            "required": [
                                "email",
                                "password",
                                "country",
                                "firstname",
                                "lastname"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "code": "KFJ32",
                                "gender": "female",
                                "age_range": "26 - 35",
                                "email": "test@example.com",
                                "firstname": "Test",
                                "lastname": "Name",
                                "credit": 0,
                                "currency": "EUR",
                                "country": "DE",
                                "facebook_id": null,
                                "cars": [
                                    {
                                        "id": 12,
                                        "license_plate": "B-AB 1234",
                                        "vehicle": "Isetta",
                                        "country": null
                                    }
                                ],
                                "phone_numbers": [
                                    {
                                        "id": 16696,
                                        "phone_number": "099028-237489"
                                    }
                                ],
                                "attributes": [
                                    {
                                        "id": 1,
                                        "key": "adac",
                                        "value": "1234567890"
                                    }
                                ],
                                "token": "098f6bcd4621d373cade4e832627b4f6"
                            }
                        }
                    }
                },
                "summary": "Retrieve a User",
                "description": "Access needs a __private key__.\n\nReturns the user object for the private key.",
                "tags": [
                    "User"
                ],
                "parameters": [],
                "produces": [
                    "application/json"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "code": "KFJ32",
                                "gender": "female",
                                "age_range": "26 - 35",
                                "email": "test@example.com",
                                "firstname": "Test",
                                "lastname": "Name",
                                "credit": 0,
                                "currency": "CHF",
                                "country": "CH",
                                "facebook_id": null,
                                "cars": [
                                    {
                                        "id": 12,
                                        "license_plate": "B-AB 1234",
                                        "vehicle": "Isetta",
                                        "country": null
                                    }
                                ],
                                "phone_numbers": [
                                    {
                                        "id": 16696,
                                        "phone_number": "099028-237489"
                                    }
                                ],
                                "attributes": [
                                    {
                                        "id": 1,
                                        "key": "adac",
                                        "value": "1234567890"
                                    }
                                ],
                                "token": "098f6bcd4621d373cade4e832627b4f6"
                            }
                        }
                    }
                },
                "summary": "Update a user",
                "description": "Access needs a __private key__.\n\nUpdates the user by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts mostly the same arguments as the user creation call.\nChanging cars, phone_numbers, attributes and password is done via separate endpoints.",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "country": {
                                    "type": "string",
                                    "enum": [
                                        "DE",
                                        "CH"
                                    ]
                                },
                                "firstname": {
                                    "type": "string"
                                },
                                "lastname": {
                                    "type": "string"
                                },
                                "gender": {
                                    "type": "string",
                                    "enum": [
                                        "female",
                                        "male"
                                    ]
                                },
                                "age_range": {
                                    "type": "string",
                                    "enum": [
                                        "18 - 25",
                                        "26 - 35",
                                        "36 - 45",
                                        "46+"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/bookings/{booking_id}/violation": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "license_plate": "B-CD 4321",
                                "comment": "This car parked on my parking space!!!",
                                "image_url": null
                            }
                        }
                    }
                },
                "summary": "Create a New Violation",
                "description": "",
                "tags": [
                    "Violations"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "The identifier of the booking\nto which the violation belongs to.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "license_plate": {
                                    "type": "string"
                                },
                                "comment": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "license_plate",
                                "comment"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "license_plate": "B-CD 4321",
                                "comment": "This car parked on my parking space!!!",
                                "image_url": "https://parku.ch/images/reports/12.jpeg"
                            }
                        }
                    }
                },
                "summary": "Retrieve a Violation",
                "description": "",
                "tags": [
                    "Violations"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "The identifier of the booking\nto which the violation belongs to.\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "license_plate": "B-CD 4321",
                                "comment": "This car parked on my parking space!!!",
                                "image_url": "https://parku.ch/images/reports/12.jpeg"
                            }
                        }
                    }
                },
                "summary": "Update a Violation",
                "description": "Updates the violation by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged. The photo can be updated through\n[adding a new photo](#header-add-a-photo).",
                "tags": [
                    "Violations"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "The identifier of the booking\nto which the violation belongs to.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "license_plate": {
                                    "type": "string"
                                },
                                "comment": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "license_plate",
                                "comment"
                            ]
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Delete a Violation",
                "description": "",
                "tags": [
                    "Violations"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "The identifier of the booking\nto which the violation belongs to.\n",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/bookings/{booking_id}/violation/image": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {
                            "application/json": {
                                "license_plate": "B-CD 4321",
                                "comment": "This car parked on my parking space!!!",
                                "image_url": "https://parku.ch/images/reports/12.jpeg"
                            }
                        }
                    }
                },
                "summary": "Add a Photo",
                "description": "You can add one photo to the violation. If you add a new photo the previous one gets overwritten.\n\nThe entire `PUT` body will be treated as the file. Make sure to add the Content-Type: `application/octet-stream`\nto your header.",
                "tags": [
                    "Violations"
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "description": "The identifier of the booking\nto which the violation belongs to.\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ]
            }
        },
        "/voucher": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "examples": {}
                    }
                },
                "summary": "Redeem a Voucher",
                "description": "#### Body Parameters",
                "tags": [
                    "Voucher"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "type": "object",
                            "properties": {
                                "voucher": {
                                    "type": "string"
                                },
                                "device_id": {
                                    "type": "string",
                                    "description": "The ID of the mobile device (usually the IMEI) when voucher code\n\ncan only be used once per device."
                                }
                            },
                            "required": [
                                "voucher"
                            ]
                        }
                    }
                ]
            }
        }
    },
    "definitions": {
        "uuid rfc4122": {
            "$ref": "#/definitions/string"
        },
        "ISO 8601": {
            "$ref": "#/definitions/string"
        },
        "Attributes": {},
        "Bookings": {},
        "Booking": {},
        "Extension Prices": {},
        "Cars": {},
        "Car": {},
        "Coupon": {},
        "Devices": {},
        "Facebook": {},
        "Invitations": {},
        "Locations": {},
        "Location": {},
        "Login": {},
        "Password": {},
        "Credit Cards": {},
        "Phone Numbers": {},
        "Phone Number": {},
        "Sesam Actions": {},
        "Sesam": {},
        "Settings": {},
        "Notification": {},
        "Static Pages": {},
        "User": {},
        "Violations": {},
        "Violation Images": {},
        "Voucher": {}
    }
}