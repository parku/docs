FORMAT: 1A
HOST: https://sandbox.test.parku.de/v4
CURL_HOST: https://sandbox.test.parku.de/v4
CURL_OPTIONS: --insecure
RESPONSE_ATTRIBUTE_LEVELS: 4
DATA_STRUCTURE_LEVELS: 1
LOGO: images/logo_parku.png

# Parku API v4 Reference

The parku API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use
HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs,
which can be understood by off-the-shelf HTTP clients. JSON will be returned in all responses from the API,
including errors.

#### Versions
- latest stable: __v4__
- beta: [v5](v5.html)

#### Api definition files
- [Swagger definition](generated/v4.swagger.json) (readable by [Postman](https://www.getpostman.com/))
- [Api Blueprint](generated/v4.apib)
# Data Structures
## uuid rfc4122 (string)
## ISO 8601 (string)
    - (string)
# Group Attributes
## Attributes [/attributes]
Access needs a __private key__.

### Create a new Attribute [POST /attributes{?key,value}]
+ Request (application/json)
    + Attributes
        + key: adac (string, required) - The name of the attribute. Currently only 'adac' and 'test' are allowed
        + value: 12345 (string, required) - The value of the attribute, eg. a membership number
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": 32,
              "key": "adac",
              "value": "12345"
            }

### Retrieve an Attribute [GET /attributes/{attribute_id}]

+ Parameters
    + attribute_id: 32 (int, required) - The identifier of the attribute to be retrieved


+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": 32,
              "key": "adac",
              "value": "12345"
            }
# Group Authentication

## Http Basic Auth
Authentication to the API occurs via HTTP Basic Auth. Provide your API key as the basic auth username.
The password is always parku.
All API requests must be made over HTTPS. Calls made over plain HTTP will fail. You must authenticate for all requests.

## Private and public keys
There are two types of keys: public and private. Public keys are used to obtain publicly available
information (eg. parking spaces). Private keys are used to identify users.
Whenever user information are requested or bookings on behalf of a user is made, the private key is necessary.

## Retrieving a private key
You retrieve a user specific private key by logging in as a user.

## Private vs. public urls
For the public urls you need a public key. With a private key you can access public urls.
# Group Bookings
Access needs a __private key__.
## Bookings [/bookings]
### List all bookings [GET /bookings{?count,offset,date_start,date_end,status}]

+ Parameters
    + count: 3 (number, optional) - A limit on the number of objects to be returned.
        Count can range between 1 and 100 items.
        + Default: 10
    + offset: 10 (number, optional) - An offset into the list of returned items.
        The API will return the requested number of items starting at that offset.
        + Default: 0
    + date_start: past (enum, optional) - Filter bookings, shows past bookings.
        + Members
            + past
    + date_end: future (enum, optional) - Filter bookings, shows past bookings.
        + Members
            + future
    + status: active (enum, optional) - Filter bookings for status.
        + Members
            + all
            + active
            + cancelled
        + Default: all

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            [
              {
                "id": "0072c629-e622-11e2-8bf1-8a83f3373875",
                "license_plate": "B-AB 1234",
                "location": {
                  "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                  "code": "ZHRTHW",
                  "latitude": 47.365398,
                  "longitude": 8.51987,
                  "street": "Hopfenstrasse",
                  "street_number": "20",
                  "postcode": "8045",
                  "city": "Zürich",
                  "country": "CH",
                  "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                  "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                  "image_urls": [
                    "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                    "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                  ],
                  "options": [],
                  "notifications": [],
                  "currency": "CHF",
                  "pricing": {
                    "rate_hourly": 2,
                    "rate_daily": 10,
                    "rate_weekly": null,
                    "rate_monthly": null
                  },
                  "support": {
                    "phone_number": "+41 43 928 72 52"
                  },
                  "address_slug": "hopfenstrasse-20",
                  "user_owned": false,
                  "settings": {
                    "bookable_range_start": -15,
                    "bookable_range_end": 43200,
                    "booking_duration_min": 30,
                    "booking_duration_max": 43200
                  },
                  "gates": [
                    {
                      "type": "beacon",
                      "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                      "gateways": [
                        {
                          "type": "box",
                          "name": "PRK-123"
                        },
                        {
                          "type": "api"
                        }
                      ]
                    },
                    {
                      "type": "qrcode",
                      "identifier": "PARKU3KU",
                      "gateways": [
                        {
                          "type": "api"
                        }
                      ]
                    }
                  ]
                },
                "phone_number": "+493057701872",
                "reference": "HRS5J",
                "date_start": "2016-10-27T10:00:00+0000",
                "date_end": "2016-10-27T16:30:00+0000",
                "price": 13.75,
                "currency": "CHF",
                "violation": null
              },
              {...},
              {...}
            ]

## Booking [/bookings/{booking_id}]
### Create a new Booking [POST /bookings{?location_id,date_start,date_end,license_plate,phone_number,provider,provider_info,status,required_fields}]
+ Request (application/json)
    + Attributes
        + location_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (string, required) -
            The ID of the location you get returned from the locations request
        + date_start: `2016-10-27T09:10:20+00:00` (string, required) - start date and time of the booking
        + date_end: `2016-10-27T10:10:20+00:00` (string, required) - end date and time of the booking
        + license_plate: `B-AB 1234` (string, required) - The license plate of the used car.
            Get all cars of a user from the [cars](#user-cars-get) request.
        + phone_number: `+493057701872` (string, required) - The phone number.
            Get all phone numbers of a user from the [phone_numbers](`#user-phone_numbers-get`) request.
        + provider: paypal (enum[string], required) - The payment method.
            + Members
                + paypal - pay by paypal
                + credit - pay by credit
                + braintree - pay by braintree
        + provider_info: `PAY-1CM399047K4649003KM4WJQQ` (string, optional) -
            The information of the payment provider to perform a payment.  Required for `paypal` and `braintree`.

            The field `provider_info` should contain required payment information.
            Typically you just forward the info from your request to the payment provider into this field.

            * **PayPal**
                You can either use the complete PayPal response or just add the payment ID: provider_info=PAY-1CM399047K4649003KM4WJQQ
            * **Braintree**
                There are two ways to pay with braintree:
                1. _CreditCard-ID_

                    Retrieve the Card ID through the payment endpoint and add it to the request:

                    ```
                    provider_info[id]=gphsyb
                    ```
                2. _CreditCard Credentials_

                    ```
                    provider_info[number]=EncryptedCreditCardNumber
                    provider_info[expiration_date]=EncryptedExpirationDate
                    provider_info[cvv]=EncryptedCvv
                    ```

        + status: all (enum[string], optional) - Get bookings by status.
            + Members
                + all
                + active
                + cancelled
            + Default: all
        + required_field (object) - Parking space required fields defined in the locations request. The required fields should contain all required fields defined in location. All values should be sent as strings.
            + car_color: `red` (string, optional) - the car color
            + number_of_passengers: `5` (string, optional) - the number of passengers

    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 201 (application/json)
    + Body

            {
              "id": "005c4826-4e28-11e3-a675-d43d7eece53d",
              "license_plate": "B-AB 1234",
              "phone_number": "+493057701872",
              "location": {
                "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                "code": "ZHRTHW",
                "latitude": 47.365398,
                "longitude": 8.51987,
                "street": "Hopfenstrasse",
                "street_number": "20",
                "postcode": "8045",
                "city": "Zürich",
                "country": "CH",
                "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                "image_urls": [
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                ],
                "options": [],
                "notifications": [],
                "currency": "CHF",
                "pricing": {
                  "rate_hourly": 2,
                  "rate_daily": 10,
                  "rate_weekly": null,
                  "rate_monthly": null
                },
                "support": {
                  "phone_number": "+41 43 928 72 52"
                },
                "address_slug": "hopfenstrasse-20",
                "user_owned": false,
                "settings": {
                  "bookable_range_start": -15,
                  "bookable_range_end": 43200,
                  "booking_duration_min": 30,
                  "booking_duration_max": 43200
                },
                "required_fields":[
                  "additional_services",
                  "car_colour",
                  "number_of_passengers"
                ],
                "gates": [
                  {
                    "type": "beacon",
                    "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                    "gateways": [
                      {
                        "type": "box",
                        "name": "PRK-123"
                      },
                      {
                        "type": "api"
                      }
                    ]
                  },
                  {
                    "type": "qrcode",
                    "identifier": "PARKU3KU",
                    "gateways": [
                      {
                        "type": "api"
                      }
                    ]
                  }
                ]
              },
              "reference": "HRS5J",
              "date_start": "2016-10-27T10:00:00+0000",
              "date_end": "2016-10-27T16:30:00+0000",
              "price": 13.75,
              "currency": "CHF",
              "violation": null
            }

### Retrieve a Booking [GET /bookings/{reference}]
Retrieves the details of an existing booking. You need to supply either the id or the reference of a booking.

+ Parameters

    + reference: `005c4826-4e28-11e3-a675-d43d7eece53d` (string, required) - The id or code of the booking
+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": "005c4826-4e28-11e3-a675-d43d7eece53d",
              "license_plate": "B-AB 1234",
              "phone_number": "+493057701872",
              "location": {
                "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                "code": "ZHRTHW",
                "latitude": 47.365398,
                "longitude": 8.51987,
                "street": "Hopfenstrasse",
                "street_number": "20",
                "postcode": "8045",
                "city": "Zürich",
                "country": "CH",
                "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                "image_urls": [
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                ],
                "options": [],
                "notifications": [],
                "currency": "CHF",
                "pricing": {
                  "rate_hourly": 2,
                  "rate_daily": 10,
                  "rate_weekly": null,
                  "rate_monthly": null
                },
                "support": {
                  "phone_number": "+41 43 928 72 52"
                },
                "address_slug": "hopfenstrasse-20",
                "user_owned": false,
                "settings": {
                  "bookable_range_start": -15,
                  "bookable_range_end": 43200,
                  "booking_duration_min": 30,
                  "booking_duration_max": 43200
                },
                "gates": [
                  {
                    "type": "beacon",
                    "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                    "gateways": [
                      {
                        "type": "box",
                        "name": "PRK-123"
                      },
                      {
                        "type": "api"
                      }
                    ]
                  },
                  {
                    "type": "qrcode",
                    "identifier": "PARKU3KU",
                    "gateways": [
                      {
                        "type": "api"
                      }
                    ]
                  }
                ]
              },
              "reference": "HRS5J",
              "date_start": "2016-10-27T10:00:00+0000",
              "date_end": "2016-10-27T16:30:00+0000",
              "price": 13.75,
              "currency": "CHF",
              "violation": {
                "license_plate": "B-DC 4321",
                "comment": "This car parked on my parking space!!!",
                "image_url": "https://parku.ch/images/reports/12.jpeg"
              },
              "extend": [
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T16:30:00+0000",
                  "price": 1.25,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T17:30:00+0000",
                  "price": 2.5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T18:30:00+0000",
                  "price": 5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T19:30:00+0000",
                  "price": 7.5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T21:30:00+0000",
                  "price": 7.5,
                  "currency": "CHF"
                }
              ]
            }

### Update a Booking [PUT /bookings/{booking_id}{?license_plate,phone_number,date_end,provider,provider_info}]
Updates the booking by setting the values of the parameters passed. Any parameter not provided will be left unchanged.

+ Parameters
    + booking_id : `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (string, required) - the booking id
    + license_plate: `B-BC 4567` (string, optional) -
        refer to the description of [`Create a new Booking`](#bookings-bookings-post)
    + phone_number: `+493057701871` (string, optional) -
        refer to the description of [`Create a new Booking`](#bookings-bookings-post)
    + date_end: `2016-10-27T17:00:00+0000` (string, optional) -
        refer to the description of [`Create a new Booking`](#bookings-bookings-post)
    + provider: `paypal` (string, optional) -
        refer to the description of [`Create a new Booking`](#bookings-bookings-post)
    + provider_info: `PAY-2CM399047K4649003KM4WJQQ` (string, optional) -
        refer to the description of [`Create a new Booking`](#bookings-bookings-post)

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    + Body

            {
              "id": "005c4826-4e28-11e3-a675-d43d7eece53d",
              "license_plate": "B-BC 1234",
              "phone_number": "+493057701871",
              "location": {
                "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                "code": "ZHRTHW",
                "latitude": 47.365398,
                "longitude": 8.51987,
                "street": "Hopfenstrasse",
                "street_number": "20",
                "postcode": "8045",
                "city": "Zürich",
                "country": "CH",
                "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                "post_booking_info": "Bitte holen sie den Schlüssel vorher ab und schließen das Tor",
                "image_urls": [
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image",
                  "http://parku.ch/parkingspace/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/image"
                ],
                "options": [],
                "notifications": [],
                "currency": "CHF",
                "pricing": {
                  "rate_hourly": 2,
                  "rate_daily": 10,
                  "rate_weekly": null,
                  "rate_monthly": null
                },
                "support": {
                  "phone_number": "+41 43 928 72 52"
                },
                "address_slug": "hopfenstrasse-20",
                "user_owned": false,
                "settings": {
                  "bookable_range_start": -15,
                  "bookable_range_end": 43200,
                  "booking_duration_min": 30,
                  "booking_duration_max": 43200
                },
                "gates": [
                  {
                    "type": "beacon",
                    "identifier": "A97186B0-C879-4526-93AD-29A731AB0C39:12:F5",
                    "gateways": [
                      {
                        "type": "box",
                        "name": "PRK-123"
                      },
                      {
                        "type": "api"
                      }
                    ]
                  },
                  {
                    "type": "qrcode",
                    "identifier": "PARKU3KU",
                    "gateways": [
                      {
                        "type": "api"
                      }
                    ]
                  }
                ]
              },
              "reference": "HRS5J",
              "date_start": "2016-10-27T10:00:00+0000",
              "date_end": "2016-10-27T16:30:00+0000",
              "price": 13.75,
              "currency": "CHF",
              "violation": {
                "license_plate": "B-DC 4321",
                "comment": "This car parked on my parking space!!!",
                "image_url": "https://parku.ch/images/reports/12.jpeg"
              },
              "extend": [
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T16:30:00+0000",
                  "price": 1.25,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T17:30:00+0000",
                  "price": 2.5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T18:30:00+0000",
                  "price": 5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T19:30:00+0000",
                  "price": 7.5,
                  "currency": "CHF"
                },
                {
                  "date_start": "2016-10-27T10:00:00+0000",
                  "date_end": "2016-10-27T21:30:00+0000",
                  "price": 7.5,
                  "currency": "CHF"
                }
              ]
            }

### Cancel a Booking [DELETE /bookings/{booking_id}]

+ Parameters
    + booking_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (string, required) - the booking id

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204

## Extension Prices [/bookings/{booking_id}/extend]
### Retrieve Custom Extend Prices [GET /bookings/{booking_id}/extend{?date_end}]
Retrieving a booking returns a few prices for standard intervals. Use this endpoint for custom intervals.

+ Parameters
    + booking_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (string, required) - the booking id
    + date_end: `2016-10-27T10:10:20+00:00` (ISO 8601, required) - end date and time of the booking

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "date_start": "2016-10-27T10:00:00+0000",
              "date_end": "2016-10-27T17:45:00+0000",
              "price": 3.15,
              "currency": "CHF"
            }
# Group Cars

## Cars [/cars]
Access needs a __private key__.

### List all cars [GET /cars]
Returns a list of all cars of the user. The cars are returned sorted by creation date,
with the most recently created car appearing first.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 201 (application/json)
    + Body

            [
              {
                "id": 22,
                "vehicle": "Ducati Monster S4Rs",
                "license_plate": "ABCDE1234",
                "country": "DE"
              },
              {
                "id": 21,
                "vehicle": "Harley Davidson FortyEight 1200",
                "license_plate": "ABCDE2345",
                "country": "DE"
              },
              {...},
              {...}
            ]

### Create a new Car [POST /cars{?license_plate,vehicle,country}]
You can store multiple cars for a user.

+ Request (application/json)
    + Attributes
        + license_plate: `B-AB 1234` (string, required) - The license plate for the stored car.
        + vehicle: Isetta (string, optional) - A name for the car to be identified easier.
        + country: DE (enum, optional) - The country code the license plate.
            + Members
                + DE
                + CH

    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 201 (application/json)
    + Body

            {
              "id": 23,
              "license_plate": "B-AB 1234",
              "vehicle": "Isetta",
              "country": "DE"
            }

## Car [/cars/{car_id}]
### Retrieve a Car [GET]

+ Parameters
    + car_id: 23 (int, required) - The identifier of the car to be retrieved

+ Request

    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": 23,
              "license_plate": "B-AB 1234",
              "vehicle": "Isetta",
              "country": "DE"
            }

### Update a Car [PUT /cars/{car_id}{?license_plate,vehicle,country}]
Updates the car by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

+ Request  (application/json)
    + Attributes
        + car_id: 23 (number, required) - The identifier of the car to be updated.
        + license_plate: `B-AB 1234` (string, required) - The license plate for the stored car.
        + vehicle: Polo (string, optional) - A name for the car to be identified easier.
        + country: DE (enum, optional) - The country code the license plate.
            + Members
                + DE
                + CH
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1


+ Response 200 (application/json)
    + Body

            {
              "id": 23,
              "license_plate": "B-AB 1234",
              "vehicle": "Polo",
              "country": "DE"
            }

### Delete a Car [DELETE /cars/{car_id}]

+ Parameters
    + car_id: 23 (number, required) - The identifier of the car to be deleted.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
# Group Coupon
## Coupon [/coupon]
Access needs a __private key__.

### Test a Coupon [GET /coupon/{encoded_code}{?action,amount}]
+ Parameters
    + encoded_code: Zm9vYmFyMTIz (string, required) - A base64url encoded coupon code string.
    + action: test (enum, required) - Action to do.
        + Members
            + test
    + amount: 42 (number, required) - Amount coupon has to be tested against.
+ Request

    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
|           |                                         |
|-----------|-----------------------------------------|
| code      | `string` Decoded, sanitized coupon code |
| value     | `number` Coupons value                  |
| deduction | `number` Amount used of coupon value    |
    + Body

            {
              "code": "foobar123",
              "value": 10,
              "deduction": 10
            }

+ Response 422 (application/json)
| Code |                                         Description                                         |
|------|---------------------------------------------------------------------------------------------|
| 10   | "amount" is faulty, probably below 0.                                                       |
| 30   | Coupon quota exhausted.                                                                     |
| 31   | User usage quota for this coupon is exhausted.                                              |
| 32   | User usage quota for a coupon is same grouping is exhausted.                                |
| 40   | Platform (Android, iOS, web) is not enabled. Some coupons only work on specific a platform. |
    + Body

            {
              "errors": [
                {
                  "field": "coupon",
                  "code": 31,
                  "message": "Coupon usage exceeded."
                }
              ]
            }

+ Response 404 (application/json)
| Code |                                         Description                                         |
|------|---------------------------------------------------------------------------------------------|
| 20   | Coupon not found.                                                                           |
| 21   | Coupon is inactive.                                                                         |
| 22   | Coupon expired.                                                                             |
| 23   | Coupon date (start or end) prohibit coupon usage.                                           |
    + Body

            {
              "errors": [
                {
                  "field": "coupon",
                  "code": 20,
                  "message": "Coupon not found."
                }
              ]
            }
# Group Devices
Access needs a __private key__.

## Devices [/devices]

This endpoint is used to send the latest device identifier to the backend.
The device identifier is used to send push notifications.

Only the creation of identifiers is allowed. Retrieving is not allowed.

### Create an Identifier [POST /devices{?ios_device_token,android_registration_id}]
Send the latest device identifier to the backend.

The iOS device token can change through time.
[Apple suggests](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW2)
to send the device token every time the app launches.

+ Request (application/json)
    + Attributes
        + `ios_device_token`: `A339F8BE4F...` (string,optional) - iOS push notification identifier via APNs.
            Full integration and how to request a push notification Device Token through Apple's APM service is accessible
            [here](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html).
            Device Token may be raw format or in push format.
        + `android_registration_id`: `A339F8BE4F...` (string,optional) - Android push notification identifier via GCM.
            Full integration and how to request a push notification Registration ID through Android's GCM service is
            accessible [here](http://developer.android.com/google/gcm/gs.html).
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
# Group Errors

```nginx
Status: 422 Unprocessable Entity
```

```json
{
  "errors": [
    {
      "field": "email",
      "message": "The email \"xxx\" is not a valid E-Mail."
    }
  ]
}
```

parku uses conventional HTTP response codes to indicate success or failure of an API request.
In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from
the provided information (e.g. a required parameter was missing, etc.), and codes in the 5xx range indicate an error
with parku's servers.

## HTTP Status Codes Summary

Code   | Description
---    |---
`200`  | OK - Everything worked as expected.
`201`  | Created - Item was created successfully. The URL to the item can be found in the "Location"-Header.
`204`  | No Content - The request was successful.
`401`  | Unauthorized - No valid API key provided.
`404`  | Not Found - The requested item doesn't exist.
`422`  |  Unprocessable Entity
`5xx`  | Server errors - something went wrong on parku's end.

All error objects have _field_ properties so that your client can tell what the problem is.
There is also an error _message_ to let you know what is wrong with the field.
# Group Facebook
Access needs a __public key__.

## Facebook [/facebook]

### Facebook Login [POST /facebook/login{?access_token}]
When a new user was created through Facebook, the country is not set.
In this case, you must ask the user for the country and [update](#user-user-put) the user profile accordingly.

All further requests using the token as _HTTP Basic Auth_ username are made on behalf of the user.

+ Request (application/json)
    + Attributes
        + `access_token`: `1234...` (string,required) - The access token which is used to obtain information from Facebook.
            The token must have the permissions to get the users email.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
# Group Invitations
## Invitations [/invitations/{invitation_code}]
Access needs a __private key__.

### Check Invitation Code Validity [GET /invitations/{invitation_code}]

+ Parameters
    + invitation_code: `d2VsbCBkb25lISBnZXQgYSBiZWVyIG5vdyA9RA==` (string,required) - Base64 encoded invitation code.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
|       |                                                                   |
|-------|-------------------------------------------------------------------|
| valid | `bool` _true_, if the invitation code is valid, _false_ otherwise |
    + Body

            {
              "valid": true
            }
# Group Locations
Access needs at least a __public key__.
## Locations [/locations]

### List Locations [GET /locations{?sw,ne,date_start,date_end,availability,bookability}]
Returns a list of locations that provide the same format as the single location.
When no `date_start` or `date_end` was provided, all locations are returned.
That does not mean, that they are available.

Some of the locations do not show all the location details in this request. A special flag `has_live_details` defines
if a second request has to be done to retrieve valid location details like description, price and availability.
If `has_live_details` is `true`, a request to the single location with the corresponding id has to be made before
booking the location. If `has_live_details` is true, the list request will have an `availability.current` of `null` and
a `price` of `null` as well as an empty `description` and `additional fields`.

+ Parameters
    + sw: `45.74001,5.67868` (string,required) - Comma separated latitude and longitude of the southwest position.
    + ne: `47.74236,10.24900` (string,required) - Comma separated latitude and longitude of the northeast position.
    + date_start: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the start date.
        `date_start` will have no effect unless `date_end` is also provided.
    + date_end: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the end date.
        `date_end` will have no effect unless `date_start` is also provided.
    + availability: all (string,optional) - Filters returned locations regarding their availability if start and end
        are also given.
        * `true` only returns available locations
            (this is default if availability is not specified and start and end were given)
        * `false` only returns non-available locations
        * `all` return all locations, including ones that no availability information is available for
        + Members
            + true
            + false
            + all
        + Default: true
    + bookability: all (string,optional) - Filters returned locations regarding their general bookability.
        * `true` only returns locations that could be booked through the api if they are available
        * `false` only returns locations that can not be booked through the api, even though they might be available
        * `all` return all locations, no matter if they would be bookable though the API or not
        + Members
            + true
            + false
            + all
        + Default: true

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1


+ Response 200
    + Body

            [
                {
                    "street": "Hopfenstrasse",
                    "street_number": "20",
                    "postcode": "8045",
                    "city": "Zürich",
                    "country": "CH",
                    "bookable": true,
                    "has_live_details": false,
                    "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                    "type": "off-street",
                    "code": "ZHRTHW",
                    "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                    "latitude": 52.505681,
                    "longitude": 13.303608,
                    "image_urls": [
                        "https://parku.de/images/parkingspace/020a81f5-c8b9-11e4-bfd2-d43d7eece658/640x286.jpg"
                    ],
                    "options": [
                        "excess length", "indoor", "disabled", "patio", "barrier"
                    ],
                    "support": {
                        "phone_number": "+41 43 928 72 52"
                    },
                    "notifications": [],
                    "currency": "EUR",
                    "price": 3.5,
                    "price_period": "timeframe",
                    "pricing": {
                        "rate_hourly": 2,
                        "rate_daily": 10,
                        "rate_weekly": null,
                        "rate_monthly": null
                    },
                    "address_slug": "hopfenstrasse-20",
                    "user_owned": false,
                    "settings": {
                        "bookable_range_start": -15,
                        "bookable_range_end": 43200,
                        "booking_duration_min": 30,
                        "booking_duration_max": 43200
                    },
                    "required_fields": [
                        "additional_services",
                        "car_colour",
                        "number_of_passengers"
                    ],
                    "provider": "parku",
                    "availability": {
                        "current": 13,
                        "maximum": 15,
                        "next_start": "2016-09-12T03:45:00+02:00",
                        "next_end": "2016-10-13T04:00:00+02:00"
                    }
                },
                { ... },
                { ... }
            ]

## Location [/locations/{location_id}]
### Retrieve a Location [GET /locations/{location_id}{?date_start,date_end}]
+ Parameters
    + location_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122, required) - Identifier of the location.
    + date_start: `2016-10-27T09:10:20+00:00` (ISO 8601, optional) - Used to calculate the price for a location.
        Requires the field `date_end` to be defined. If no `date_start` or `date_end` is specified,
        the returned `price` field will be `null`.
    + date_end: `2016-10-27T10:10:20+00:00` (ISO 8601, optional)
        see `date_start`.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    | Field                         | Description                                                                                                                                                                                                                          |
    | -----------------             | --------------------------------------------------------------------------------------                                                                                                                                               |
    | address_slug                  | `string` street name and number of the location in url address format                                                                                                                                                                |
    | availability                  | `dictionary` describes the availability of the location in relation to the request                                                                                                                                                   |
    | availability.current          | `number` the number of parking spaces available at the location for the requested time period defined by `start` and `end`                                                                                                           |
    | availability.maximum          | `number` the overall number of parking spaces at this location                                                                                                                                                                       |
    | availability.next_start       | `time` the start of the next from now slot in which a parking space in this location is free and bookable, can be in the past                                                                                                        |
    | availability.next_end         | `time` the end of the next slot from now in which a parking space in this location is free and bookable, can be in the past                                                                                                          |
    | bookable                      | `boolean` `true` if that locations can be booked via the parku API, `false` if the location is purely providing information                                                                                                          |
    | city                          | `string` city of the location                                                                                                                                                                                                        |
    | code                          | `string` short identification code of the location, not necessarily unique                                                                                                                                                           |
    | country                       | `string` country of the location in 2 character encoding                                                                                                                                                                             |
    | currency                      | `string` the currency that the price for the location is in, `EUR` for Euro or `CHF` for swiss franc.                                                                                                                                |
    | description                   | `string` the description of the location. The description is returned in the users language or in the language specified by the HTTP header `Accept-Language` if it was given.                                                       |
    | id                            | `uuid rfc4122` unique identifier of the location used for referencing.                                                                                                                                                               |
    | image_urls                    | `list` urls of location images, can be **empty**                                                                                                                                                                                     |
    | has_live_details              | `boolean` if `true` for booking a request to the single location endpoint has to be made to retrieve valid location details (price, availability, description, additional fields)
    |
    | latitude                      | `decimal` latitude part of the location geo coordinate                                                                                                                                                                               |
    | longitude                     | `decimal` longitude part of the location geo                                                                                                                                                                                         |
    | notification                  | `list` *deprecated* usually empty, ignore                                                                                                                                                                                            |
    | options                       | `list` describes which options are available at the location and can contains each of the following elements. The list can be **empty**.                                                                                             |
    | options[excess length]        | the parking space can be used by cars with a small trailer                                                                                                                                                                           |
    | options[indoor]               | the parking space has a roof or can be an underground garage                                                                                                                                                                         |
    | options[disabled]             | parking space is accessible for disabled people                                                                                                                                                                                      |
    | options[patio]                | the parking space is located at an inner courtyard                                                                                                                                                                                   |
    | options[barrier]              | parking space has a barrier and user needs a smartphone to open it                                                                                                                                                                   |
    | options[charging station]     | parking space with an electric vehicle charging station                                                                                                                                                                              |
    | options[key_necessary]        | parking space can only be accessed with a key                                                                                                                                                                                        |
    | options[long_term_booking]    | parking space is bookable for longer time period                                                                                                                                                                                     |
    | options[surveillance]         | parking space has surveillance                                                                                                                                                                                                       |
    | options[valet_service]        | parking space contains valet service                                                                                                                                                                                                 |
    | price                         | `decimal` the actual price shown to the user, can be **null** if `start` or `end` were not provided                                                                                                                                  |
    | price_period                  | `string` contains the period for how long the price is valid, can be `day`, `week`, `month`, `timeframe`, can be **null** if `start` or `end` was not provided                                                                       |
    | pricing                       | `dictionary` contains information about the pricing and price prediction. It contains the keys                                                                                                                                       |
    | pricing.rate_hourly           | `decimal` shows the price for per hour                                                                                                                                                                                               |
    | pricing.rate_daily            | `decimal` shows the price per day                                                                                                                                                                                                    |
    | pricing.rate_weekly           | `decimal` shows the price per week                                                                                                                                                                                                   |
    | pricing.rate_monthly          | `decimal` shows the price per month                                                                                                                                                                                                  |
    | post_code                     | `string` post code of the location                                                                                                                                                                                                   |
    | provider                      | `string` names the parking space provider. Additional information(terms and conditions, logo, ...) about the provider can found be using the provider key from the field in [settings](/api/settings/)                               |
    | required_fields               | `list` lists all additionally required fields when creating a booking for this location, can be **empty** if no fields are required. The field names correspond to the `booking.fields.*` entries in the settings endpoint which can |
    |                               | be used for retrieving translated strings for these fields.                                                                                                                                                                          |
    | settings                      | `dictionary` provides booking requirements for the location. The settings of a location are used in favor of the global settings that can be found in the settings endpoint.                                                         |
    | settings.bookable_range_start | `number` start of the range wherein a booking is allowed in minutes from now.                                                                                                                                                        |
    | settings.bookable_range_end   | `number` end of the range wherein a booking is allowed in minutes from now.                                                                                                                                                          |
    | settings.booking_duration_min | `number` minimum duration of a booking in minutes.                                                                                                                                                                                   |
    | settings.booking_duration_max | `number` maximum duration of a booking in minutes.                                                                                                                                                                                   |
    | street                        | `string` the street name of the location without number                                                                                                                                                                              |
    | street_number                 | `string` the street number of the location                                                                                                                                                                                           |
    | support                       | `dictionary` contains field `phone_number` that returns the support center phone number for this location                                                                                                                            |
    | type                          | `string` describes the type of location and can be one of the following. Choices `off-street` `park-and-ride` `professional-garage` `airport-parking` `harbor-parking`                                                               |
    | user_owned                    | `boolean` `true` if the user who requested the location is also the owner of the parking space. This allows to determine if the user could block the parking space from bookings. The blocking feature itself is not yet             |

    + Body

            {
                "street": "Hopfenstrasse",
                "street_number": "20",
                "postcode": "8045",
                "city": "Zürich",
                "country": "CH",
                "bookable": true,
                "has_live_details": false,
                "id": "00cd7cfd-e42d-11e2-8bf1-8a83f3373875",
                "type": "off-street",
                "code": "ZHRTHW",
                "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                "latitude": 52.505681,
                "longitude": 13.303608,
                "image_urls": [
                    "https://parku.de/images/parkingspace/020a81f5-c8b9-11e4-bfd2-d43d7eece658/640x286.jpg"
                ],
                "options": [
                    "excess length", "indoor", "disabled", "patio", "barrier"
                ],
                "support": {
                    "phone_number": "+41 43 928 72 52"
                },
                "notifications": [],
                "currency": "EUR",
                "price": 3.5,
                "price_period": "timeframe",
                "pricing": {
                    "rate_hourly": 2,
                    "rate_daily": 10,
                    "rate_weekly": null,
                    "rate_monthly": null
                },
                "address_slug": "hopfenstrasse-20",
                "user_owned": false,
                "settings": {
                    "bookable_range_start": -15,
                    "bookable_range_end": 43200,
                    "booking_duration_min": 30,
                    "booking_duration_max": 43200
                },
                "required_fields": [
                    "additional_services",
                    "car_colour",
                    "number_of_passengers"
                ],
                "provider": "parku",
                "availability": {
                    "current": 13,
                    "maximum": 15,
                    "next_start": "2016-09-12T03:45:00+02:00",
                    "next_end": "2016-10-13T04:00:00+02:00"
                }
            }

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 404
Location was not found, check the location id and that your user has the correct access rights to see the location.
    + Body


+ Response 422
Request validation failed because the request data was malformed.
    + Body

### Get availability times for location [GET /locations/{location_id}/availability{?date_start,date_end}]

+ Parameters
    + location_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.
    + date_start: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Start of time frame to include periods.
        If `date_start` is provided, `date_end` is required and vice versa.
    + date_end: 2016-10-27T10:10:20+00:00 (ISO 8601, optional)
        see `date_start`.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    Displays the availability times. For every affected availability period there will be one entry in the json.
    This sub json contains 9 keys, one for every weekday including the day's times and also the period start and end.

    __Caution__: This does not include bookings

    A period is affected, if one of the following holds:

    * `date_start` is between period start and period end
    * `date_end` is between period start and end
    * `date_start` and `date_end` overlay the period

    + Body

            {
                "begin": "2016-04-09T00:00:00+02:00",
                "end": "2016-04-18T00:00:00+02:00",
                "weekday_1": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_2": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_3": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_4": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_5": [{
                  "start": "08:00",
                  "end": "18:00"
                }],
                "weekday_6": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_7": [{
                  "start": "08:00",
                  "end": "17:00"
                }]
            }

### Retrieve Terms and Conditions [GET /locations/{location_id}/terms]

__Deprecated__ This endpoint is deprecated. `/settings` endpoint should be used instead.

Each location can have different terms and conditions.
With this endpoint you can retrieve location based terms and conditions.

+ Parameters
    + location_id: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
              <html xmlns="http://www.w3.org/1999/xhtml"...
# Group Login
## Login [/login]
Access needs a __public key__.

### Login [POST /login{?email,password}]

Checks the given credentials email and password for validity.
Returns the user object with a user token needed for private endpoints. A public key is needed.
All further requests using the token as HTTP Basic Auth username are made on behalf of the user.

Login through Facebook is described in a separate endpoint.

+ Request
    + Attributes
        + `email`: `test@example.com` (string,required) - The users email address.
        + `password`: `1234pwd` (string,required) - The users password.

    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    + Body

            {
              "code": "KFJ32",
              "gender": "male",
              "email": "test@example.com",
              "firstname": "Firstname",
              "lastname": "Lastname",
              "credit": 106.50,
              "currency": "CHF",
              "country": "CH",
              "facebook_id": "100006987966349",
              "cars": [{
                  "id": 12,
                  "license_plate": "B-AB 1234",
                  "vehicle": "Isetta",
                  "country": null
              }],
              "phone_numbers": [{
                "id": 16696,
                "phone_number": "099028-237489"
              }],
              "attributes": [{
                "id": 1,
                "key": "adac",
                "value": "1234567890"
              }],
              "token": "ce35e3504183c2f52f58263ce11004e0"
            }
# Group Password
## Password [/password]

### Update password [PUT /password]
Access needs a __private key__.

+ Request
    + Attributes
        + `old_password`: pwd123 (string,required) - The current active password.
        + `new_password`: pwd321 (string,required) - The new password.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204

### Reset password [GET /password{?for}]
Access needs a __public key__.

This sends an email with the newly set password to the users email address.

+ Parameters
    + for: `test@example.com` (string,required) - A valid email address of the user.


+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204

+ Response 404
The given email address is not found in the database.
    + Body
# Group Payment
Access needs a __private key__.
## Credit Cards [/payment/creditcards]
### List Credit Cards [GET /payment/creditcards]
Shows all credit cards the user used before.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "gphsyb",
                    "type": "Visa",
                    "number": "400934******1881",
                    "expiration_date": "05/2020",
                    "image_url": "https://assets.braintreegateway.com/payment_method_logo/visa.png?environment=sandbox&merchant_id=8fbxty8dhjmy8g4j"
                },
                {
                    "id": "6tvts6",
                    "type": "Visa",
                    "number": "411111******1111",
                    "expiration_date": "01/2014",
                    "image_url": "https://assets.braintreegateway.com/payment_method_logo/visa.png?environment=sandbox&merchant_id=8fbxty8dhjmy8g4j"
                }
            ]

### Delete a Credit Card [DELETE /payment/credit_cards/{credit_card_id}]

+ Parameters
    + credit_card_id: gphsyb (string,required) - The identifier of the credit card to delete.
        You'll receive a list of the users credit cards through the `GET /payment/creditcards` request.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204

### Update Credit [PUT /payment/credit{?amount,provider,provider_info}]
__Deprecated__: this will be removed in __v5__.

+ Request
    + Attributes
        + `amount`: 10 (number,required) - The amount.
        + `provider`: paypal (enum,required) The payment method.
            + Members
                + paypal
                + braintree
        + `provider_info`: `PAY-1CM399047K4649003KM4WJQQ` (string,required) - refer to the description
              of [Create a new Booking](#bookings-bookings-post)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "gender": "female",
              "email": "test@example.com",
              "firstname": "Test",
              "lastname": "Name",
              "credit": 10,
              "currency": "EUR",
              "country": "DE",
              "facebook_id": null,
              "token": "098f6bcd4621d373cade4e832627b4f6"
            }
# Group Phone Numbers
Access needs a __private key__.

## Phone Numbers [/phone_numbers]
### List all Phone Numbers [GET /phone_numbers]
Returns a list of all phone numbers of the user.
The phone numbers are returned sorted by creation date, with the most recently created phone number appearing first.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            [
              {
                "id": 150,
                "phone_number": "+493057701872"
              },
              {
                "id": 149,
                "phone_number": "+493057701871"
              },
              {...},
              {...}
            ]

### Create a New Phone Number [POST /phone_numbers]
You can store multiple phone numbers for a user.

#### Body Parameters
+ Request (application/json)
    + Attributes
        + `phone_number`: `+493057701873` (string,required) - The phone number.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 201 (application/json)
    + Body

            {
                "id": "151",
                "phone_number": "+493057701873"
            }

## Phone Number [/phone_numbers/{phone_number_id}]
### Retrieve a Phone Number [GET /phone_numbers/{phone_number_id}]

+ Parameters
    + phone_number_id: 151 (number,required) - The identifier of the phone number to be retrieved.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": 151,
              "phone_number": "+493057701873"
            }

### Update a Phone Number [PUT /phone_numbers/{phone_number_id}]
#### Body Parameters
+ Request (application/json)
    + Attributes
        + phone_number_id: 151 (number,required) - The identifier of the phone number to be updated.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "id": 151,
              "phone_number": "+493057701874"
            }

### Delete a Phone Number [DELETE /phone_numbers/{phone_number_id}]
+ Parameters
    + phone_number_id: 151 (number,required) - The identifier of the phone number to be deleted.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
# Group Sesam
Access needs a __private key__.

## Sesam Actions [/sesam/{sesam_id}]

This endpoint is used to open gates and barriers. A private key is needed.
The user scans a QR code which is attached somewhere near the gate or barrier.
The QR code contains an URL: http://parku.ch/s/1234abcd or http://parku.de/s/1234abcd.

The part after the last / (slash) represents the sesam ID.
You have to parse the URL and create an API call with the sesam ID.

![QR code 1](images/qr1.png) ![QR code 2](images/qr2.png)

_Both QR codes are valid and activate a sesam device in the parku office._

### Open Sesam [PUT /sesam/{sesam_id}]

+ Parameters
    + sesam_id: 1234abcd (string,required) - The sesam ID which is hidden in the QR code.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
    Everything went fine. The gate/barrier connected to the sesam device should open in the next few seconds.
    + Body

+ Response 404
    The QR code is not valid. Either it is not a parku QR code or the QR code is outdated.
    + Body

+ Response 401
    The code is valid, but the user does not have the permissions to use this sesam device.
    Either no booking is made or the time for opening the sesam has expired.
    + Body

## Sesam [/sesam]
### Check Sesam [GET /sesam]
This endpoint gives you the information whether the user can open a sesam device now or in the near future.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    Returned if a booking with a sesam device is available.
    + Body

            {
              "support": {
                "phone_number": {
                  "phone_number": "+49 123 456 789"
                }
              }
            }

+ Response 404
    No booking with a sesam device available.
    + Body
# Group Settings
## Settings [/settings]
Access needs at least a __public key__.
### Retrieve Settings [GET /settings{?lat,lon}]

This endpoint exposes the global settings for the ParkU-platform.
Changing the settings is not possible.

+ Parameters
    + lat: `52.53568811` (float,optional) - Latitude of current location.
    + lon: `13.39412887` (float,optional) - Longitude of current location.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)

    #### Response Fields
    |             Field             |                                                                                  Description                                                                                   |
    |-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | location                      | provides the booking requirements for a parking space. Every location can have its own settings but these will always be the same or within the limits of the global settings. |
    | location.bookable_range_start | start of the range wherein a booking is allowed in minutes from now.                                                                                                           |
    | location.bookable_range_end   | end of the range wherein a booking is allowed in minutes from now.                                                                                                             |
    | location.booking_duration_min | minimum duration of a booking in minutes.                                                                                                                                      |
    | location.booking_duration_max | maximum duration of a booking in minutes.                                                                                                                                      |
    | sesam                         | contains informations about how to work with the sesam boxes.                                                                                                                  |
    | sesam.connection_trials       | Amount of tries to connect to a sesam box.                                                                                                                                     |
    | sesam.connection_timeout      | Amount of seconds allowed to connect to a box.                                                                                                                                 |
    | sesam.communication_timeout   | Second until canceling the communication with the sesam box.                                                                                                                   |
    | gps                           | contains information on how to handle GPS data.                                                                                                                                |
    | gps.ttl                       | Time-To-Live for previously retrieved GPS data i.e. by operation system                                                                                                        |
    | gps.accuracy                  | Accuracy of GPS data in meters, renders data invalid if exceeded                                                                                                               |
    | booking                       | contains information on how to handle bookings.                                                                                                                                |
    | booking.collection.ttl        | Time-To-Live for previously retrieved booking list                                                                                                                             |
    | booking.notification.*        | List of notifications and their settings. see [Notifications](#header-notifications)                                                                                          |
    | booking.fields.*              | List of additional fields that may be required to make a booking. see [Additional Fields](#header-additional-fields)                                                          |
    | features                      | see [Features](#header-features)                                                                                                                                              |
    | provider                      | see [Provider](#header-provider)                                                                                                                                              |

    #### Notifications
    Each notification contains an `enabled` flag. If set to `true`, the notification is enabled and should appear. If set to `false`, that notification is disabled.
    |     Field     |                                        Description                                        |
    |---------------|-------------------------------------------------------------------------------------------|
    | time_to_leave | _n_ `time_to_leave.minutes` before to leave to get to a booking location.                 |
    | near_location | Entering a region, defined by `near_location.radius` in meters around a booking location. |
    | near_entry    | Entering a region, defined by `near_entry.radius` in meters around a booking location.    |
    | expiring      | Shown _n_ `expiring.minutes` to a bookings ending.                                        |
    | over          | Shown _n_ `over.minutes` to a bookings ending.                                            |

    #### Additional Fields
    Each additional field uses its name as a key to a dictionary containing the field `label` and `type`.
    `label` contains the translated name of the field.
     The translation of the label is determined by the language of user who is identified by the provided user token.

    Field types currently are:
    * text
    * datetime
    * date
    * time
    * number
    * tel
    * boolean

    #### Features
    Feature flags that enables or disables certaint features based parameters given in header. These feature flags can be different for each operation systems.

    * `recommend_update` _Android specific_: Is enabled if there is a newer version off application that is
        recommended to be updated. Current version still works.
    * `force_update` _Android specific_: Is enabled if current application version is not supported anymore.

    #### Provider
    Info for parking space provider. Key is linked with location response field `provider`.

    |    Field     |                                             Description                                             |
    |--------------|-----------------------------------------------------------------------------------------------------|
    | image        | Large provider logo.                                                                                |
    | thumbnail    | Provider logo thumbnail.                                                                            |
    | header       | Translated header text for required fields.                                                         |
    | legal        | Contains two lists for terms and conditions entries where you can find text and url for each.       |
    | legal.accept | List of terms and conditions entries which the user needs to accept by some action (like checkbox). |
    | legal.show   | List of terms and conditions entries which the user needs only to see.                              |

    If the list entry `text` contains ``%TERMS_LINK%``, it should be replaced by the actual link (check example).

    + Body

            {
                "location": {
                  "bookable_range_start": -15,
                  "bookable_range_end": 43200,
                  "booking_duration_min": 30,
                  "booking_duration_max": 43200
                },
                "sesam": {
                  "bluetooth": {
                    "connection_trials": 2,
                    "connection_timeout": 2,
                    "communication_timeout": 2
                  }
                },
                "gps": {
                  "ttl": 60,
                  "accuracy": 1000
                },
                "booking": {
                  "collection": {
                    "ttl": 60
                  },
                  "notification": {
                    "time_to_leave": {
                      "enabled": true,
                      "type": "time",
                      "time": {
                        "minutes": -5,
                        "relative_to": "begin",
                        "include_distance": true
                      }
                    },
                    "near_location": {
                      "enabled": true,
                      "type": "region",
                      "radius": 500
                    },
                    "near_entry": {
                      "enabled": true,
                      "type": "region",
                      "radius": 50
                    },
                    "expiring": {
                      "enabled": true,
                      "type": "time",
                      "time": {
                        "minutes": -10,
                        "relative_to": "end",
                        "include_distance": false
                      }
                    },
                    "over": {
                      "enabled": true,
                      "type": "time",
                      "time": {
                        "minutes": -2,
                        "relative_to": "end",
                        "include_distance": false
                      }
                    }
                  },
                  "fields": {
                    "additional_services": {
                      "label": "zusätzliche Dienste",
                      "type": "text"
                    },
                    "car_colour": {
                      "label": "Fahrzeugfarbe",
                      "type": "text"
                    },
                    "number_of_passengers": {
                      "label": "Anzahl der Passagiere",
                      "type": "number"
                    }
                    ...
                  }
                },
                "features": {
                  "recommend_update": {
                    "enabled": true
                  },
                  "force_update": {
                    "enabled": false
                  }
                },
                "provider": {
                  "parku": {
                    "legals": {
                      "show": [{
                        "text": "By proceeding further, you acknowledge and agree to ParkU’s %TERMS_LINK%.",
                        "url": "https:\/\/parku.de\/terms\/"
                      }]
                    }
                  },
                  "providerkey": {
                    "image": "http://provider/image.png",
                    "thumbnail": "http://provider/thumbnail.png",
                    "header": "Please provide the data necessary for booking the parking space.",
                    "legals": {
                      "accept": [
                        {
                          "url": "http://www.provider.com/terms_and_conditions.html",
                          "text": "Please accept the parking providers' %TERMS_LINK%.",
                        }
                      ],
                      "show": [
                        {
                          "url": "http://www.provider.com/terms_and_conditions_info.html",
                          "text": "By tapping 'Pay Now' you hereby acknowledge and agree the %TERMS_LINK% of parking space provider",
                        }
                      ],
                    }
                  }
                }
              }

## Notification [/settings/booking/notification/{notification_key}]
### Enable/Disable Notification [PUT /settings/booking/notification/{notification_key}]
#### Body Parameters
+ Parameters
    + notification_key: `entry` (enum,required)
        A notification key
        + Members
            + time_to_leave
            + near_location
            + entry
            + expiring
            + over

+ Request (application/json)
    + Attributes
        + `enabled`: true (boolean,required) - The value for the notification key.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
    Updated successfully.
    + Body

+ Response 304
    Value of notification was not modified.
    + Body
# Group Static Pages
Access needs at least a __public key__.

## Static Pages [/terms]
### Retrieve Terms and Conditions [GET /terms]

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
                <html xmlns="http://www.w3.org/1999/xhtml"...

## Static Pages [/imprint]
### Retrieve Imprint [GET /imprint]

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
                <html xmlns="http://www.w3.org/1999/xhtml"...

## Static Pages [/privacy_policy]
### Retrieve Privacy Policy [GET /privacy_policy]

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
                <html xmlns="http://www.w3.org/1999/xhtml"...
# Group User
## User [/user]

### Create a User [POST /user]
Access needs a __public key__.

+ Request (application/json)
    + Attributes
        + `email`: `test@example.com` (string,required)
        + `password`: `test` (string,required)
        + `country`: `DE` (enum,required)
            + Members
                + DE
                + CH
        + `firstname`: `Max` (string,required)
        + `lastname`: `Power` (string,required)
        + `gender`: `female` (enum,optional)
            + Members
                + female
                + male
        + `age_range`: `18 - 25` (enum,optional)
            + Members
                + `18 - 25`
                + `26 - 35`
                + `36 - 45`
                + `46+`
        + `facebook_id`: `xxx` (string,optional)
        + `cars` (array,optional)
            + (object)
                + `license_plate`: `B-AB 1234` (string,optional)
                + `vehicle`: `Isetta` (string,optional)
                + `country`: `DE` (enum,optional)
                    + Members
                        + DE
                        + CH
        + `phone_numbers` (array,optional)
            + (object)
                + `phone_number`: `099028-237489` (string,optional)
        + `attributes` (array,optional)
            + (object)
                + `key`: `adac` (string,optional)
                + `value`: `1234567890` (string,optional)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 201 (application/json)
    + Body

            {
              "code": "KFJ32",
              "gender": "female",
              "age_range": "26 - 35",
              "email": "test@example.com",
              "firstname": "Test",
              "lastname": "Name",
              "credit": 0,
              "currency": "EUR",
              "country": "DE",
              "facebook_id": null,
              "cars": [{
                "id": 12,
                "license_plate": "B-AB 1234",
                "vehicle": "Isetta",
                "country": null
              }],
              "phone_numbers": [{
                "id": 16696,
                "phone_number": "099028-237489"
              }],
              "attributes": [{
                "id": 1,
                "key": "adac",
                "value": "1234567890"
              }],
              "token": "098f6bcd4621d373cade4e832627b4f6"
            }

### Retrieve a User [GET /user]
Access needs a __private key__.

Returns the user object for the private key.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "code": "KFJ32",
              "gender": "female",
              "age_range": "26 - 35",
              "email": "test@example.com",
              "firstname": "Test",
              "lastname": "Name",
              "credit": 0,
              "currency": "EUR",
              "country": "DE",
              "facebook_id": null,
              "cars": [{
                "id": 12,
                "license_plate": "B-AB 1234",
                "vehicle": "Isetta",
                "country": null
              }],
              "phone_numbers": [{
                "id": 16696,
                "phone_number": "099028-237489"
              }],
              "attributes": [{
                "id": 1,
                "key": "adac",
                "value": "1234567890"
              }],
              "token": "098f6bcd4621d373cade4e832627b4f6"
            }

### Update a user [PUT /user]
Access needs a __private key__.

Updates the user by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

This request accepts mostly the same arguments as the user creation call.
Changing cars, phone_numbers, attributes and password is done via separate endpoints.

+ Request (application/json)
    + Attributes
        + `email`: `test@example.com` (string,optional)
        + `country`: `DE` (enum,optional)
            + Members
                + DE
                + CH
        + `firstname`: `Max` (string,optional)
        + `lastname`: `Power` (string,optional)
        + `gender`: `female` (enum,optional)
            + Members
                + female
                + male
        + `age_range`: `18 - 25` (enum,optional)
            + Members
                + `18 - 25`
                + `26 - 35`
                + `36 - 45`
                + `46+`
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "code": "KFJ32",
              "gender": "female",
              "age_range": "26 - 35",
              "email": "test@example.com",
              "firstname": "Test",
              "lastname": "Name",
              "credit": 0,
              "currency": "CHF",
              "country": "CH",
              "facebook_id": null,
              "cars": [{
                "id": 12,
                "license_plate": "B-AB 1234",
                "vehicle": "Isetta",
                "country": null
              }],
              "phone_numbers": [{
                "id": 16696,
                "phone_number": "099028-237489"
              }],
              "attributes": [{
                "id": 1,
                "key": "adac",
                "value": "1234567890"
              }],
              "token": "098f6bcd4621d373cade4e832627b4f6"
            }
# Group Violations
## Violations [/bookings/{booking_id}/violation]
Access needs a __private key__.

You can store one violation per booking. A violation report is done in two steps:
1. Create a new violation
2. Add a photo

### Create a New Violation [POST /bookings/{booking_id}/violation]
+ Parameters
    + booking_id: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/json)
    + Attributes
        + license_plate: `B-CD 4321` (string,required)
        + comment: `This car parked on my parking space!!!` (string,required)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": null
            }

### Retrieve a Violation [GET /bookings/{booking_id}/violation]

+ Parameters
    + booking_id: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }

### Update a Violation [PUT /bookings/{booking_id}/violation]
Updates the violation by setting the values of the parameters passed.
Any parameters not provided will be left unchanged. The photo can be updated through
[adding a new photo](#header-add-a-photo).
+ Parameters
    + booking_id: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/json)
    + Attributes
        + `license_plate`: `B-CD 4321` (string,required)
        + `comment`: `This car parked on my parking space!!!` (string,required)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }

### Delete a Violation [DELETE /bookings/{booking_id}/violation]

+ Parameters
    + booking_id: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.
+ Request (application/json)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204

## Violation Images [/bookings/{booking_id}/violation/image]
### Add a Photo [PUT /bookings/{booking_id}/violation/image]
You can add one photo to the violation. If you add a new photo the previous one gets overwritten.

The entire `PUT` body will be treated as the file. Make sure to add the Content-Type: `application/octet-stream`
to your header.

+ Parameters
    + booking_id: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/octet-stream)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }
# Group Voucher
## Voucher [/voucher]
Access needs a __private key__.

__DEPRECATED__ This resource is deprecated and will be removed in __v5__. Use coupons instead.

### Redeem a Voucher [PUT /voucher]
#### Body Parameters
+ Request (application/json)
    + Attributes
        + `voucher`: `parkieren12` (string,required)
        + `device_id`: `asdf1234` (string,optional) - The ID of the mobile device (usually the IMEI) when voucher code
            can only be used once per device.
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    + Body

            {
              "gender": "female",
              "email": "test@example.com",
              "firstname": "Test",
              "lastname": "Name",
              "credit": 5.0,
              "currency": "EUR",
              "country": "DE",
              "facebook_id": null,
              "token": "098f6bcd4621d373cade4e832627b4f6"
            }
# Group Changelog

### 2016-12-23

* `has_live_details` field for locations model

### 2016-11-21

* New examples and formatting

### 2016-09-22

* Extended location with `availability` and `bookability`
* Reformatted location

### 2016-09-12

* Extended login with new information fields.

### 2016-09-09

* Extended coupon with error message 40.

### 2016-05-19

* Extended settings with `provider`
* Extended location with `provider`
* Added terms and conditions remark to the top of bookings

### 2016-05-18

* Adding type to required fields in settings endpoint with `booking.fields`
* Extended new booking in bookings endpoint with `required_fields`

### 2016-05-09

* Extended settings endpoint with `booking.fields`
* Extended location endpoints with `required_fields`

### 2016-05-02

* Added features settings endpoint. Return feature flags based on parameters and user agent.

### 2016-04-28

* Added new properties to locations endpoint.
* Introduced type for locations endpoint.
* Added optional status filter to bookings endpoint. Retrieve bookings filtered by status.

### 2016-04-08

* Added availability endpoint. Retrieve information
  about the availability times of a parking space.

### 2016-03-07

* Added coupon endpoint. It enables 3rd parties to validate a
  coupon code.

### 2016-02-16

* Response in user endpoint returns a `code` node, containing a
  character/number combination, unique to each customer.

### 2016-02-02

* Extended settings endpoint with *gps* node.
* Added *notifications* to settings endpoint.
* Added `PUT` to toggle notification in settings endpoint.

### 2015-11-24

* Added the sesam settings to the settings endpoint.

### 2015-11-17

* Changed the naming of the location node in the response of the settings endpoint.

### 2015-11-17

* Added `/v4/settings` endpoint.

### 2015-10-20

* Remove _Launch Messages_.

### 2015-09-25

* Removing the `minimum_displayprice` and `minimum_displayprice_unit`.
* Adding the `price_period` to location endpoints.

### 2015-09-14

* New endpoint for deleting credit cards.

### 2015-09-11

* New user_owned attribute added to the location endpoint. This returns true if the user who requests the location is also the owner of that parking space.

### 2015-08-28

* Add attributes to a new user or update them for existing ones

### 2015-08-07

* Expose post booking information to every booking for storing more sensitive data

### 2015-08-03

* Expose gate information to every booking on how to open a gate (via api or via bt)

### 2015-07-30

* Added cars and phone_numbers to user endpoint
* Parameter "password" is optional when creating User
* Added minimum_displayprice_unit and minimum_displayprice to location endpoint.

### 2015-07-05

* Added the _beacon_ directive to the boxes endpoint.

### 2015-07-01

* Added the boxes endpoint.

### 2015-05-22

* Removed the `currency` as a parameter for updating the users credit. `currency` is still accepted as a parameter, but is ignored. The users country currency setting will be used instead.
