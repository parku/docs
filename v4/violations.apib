# Group Violations
## Violations [/bookings/{booking_id}/violation]
Access needs a __private key__.

You can store one violation per booking. A violation report is done in two steps:
1. Create a new violation
2. Add a photo

### Create a New Violation [POST /bookings/{booking_id}/violation]
+ Parameters
    + `booking_id`: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/json)
    + Attributes
        + `license_plate`: `B-CD 4321` (string,required)
        + `comment`: `This car parked on my parking space!!!` (string,required)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": null
            }

### Add a Photo [PUT /bookings/{booking_id}/violation/image]
You can add one photo to the violation. If you add a new photo the previous one gets overwritten.

The entire `PUT` body will be treated as the file. Make sure to add the Content-Type: `application/octet-stream`
to your header.

+ Parameters
    + `booking_id`: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/octet-stream)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }

### Retrieve a Violation [GET /bookings/{booking_id}/violation]

+ Parameters
    + `booking_id`: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }

### Update a Violation [PUT /bookings/{booking_id}/violation]
Updates the violation by setting the values of the parameters passed.
Any parameters not provided will be left unchanged. The photo can be updated through
[adding a new photo](#header-add-a-photo).
+ Parameters
    + `booking_id`: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.

+ Request (application/json)
    + Attributes
        + `license_plate`: `B-CD 4321` (string,required)
        + `comment`: `This car parked on my parking space!!!` (string,required)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Body

            {
              "license_plate": "B-CD 4321",
              "comment": "This car parked on my parking space!!!",
              "image_url": "https://parku.ch/images/reports/12.jpeg"
            }

### Delete a Violation [DELETE /bookings/{booking_id}/violation]

+ Parameters
    + `booking_id`: `0072c629-e622-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - The identifier of the booking
        to which the violation belongs to.
+ Request (application/json)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 204
