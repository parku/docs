# Group Locations
## Locations [/locations]
The [location model](#header-location-model) contains the directly location related information (e.g. street and city)
as well as one or more parking space groups.

A [parking space group](#header-parking-space-group-model) is a group of parking spaces with similar properties.
Bookings are made using parking space group ids.

The [location list](#header-list-locations-get-1) can cover a large number of locations in its response. In order to
keep the responses reasonably fast and small that request will return a mix of locations and clusters.
A [location cluster](#header-cluster-model) contains information about how many locations are in a certain area.

###  Location Model
| Field                   | Description                                                                                                                   |
| -----------------       | --------------------------------------------------------------------------------------                                        |
| address_slug            | `string` street name and number of the location in url address format                                                         |
| availability            | `dictionary` describes the availability of the location in relation to the request                                            |
| availability.current    | `number` the number of parking spaces available at the location for the requested time period defined by `start` and `end`    |
| availability.maximum    | `number` the overall number of parking spaces at this location                                                                |
| availability.next_start | `time` the start of the next from now slot in which a parking space in this location is free and bookable, can be in the past |
| availability.next_end   | `time` the end of the next slot from now in which a parking space in this location is free and bookable, can be in the past   |
| bookable                | `boolean` `true` if that locations can be booked via the parku API, `false` if the location is purely providing information   |
| city                    | `string` city of the location                                                                                                 |
| country                 | `string` country of the location in 2 character encoding                                                                      |
| currency                | `string` the currency that the price for the location is in, `EUR` for Euro or `CHF` for swiss franc.                         |
| id                      | `uuid rfc4122` unique identifier of the location used for referencing.                                                        |
| latitude                | `decimal` latitude part of the location geo coordinate                                                                        |
| longitude               | `decimal` longitude part of the location geo                                                                                  |
| parking_space_groups    | `object` different parking space groups for this location. See [Parking Space Group Data](#header-parking-space-group-data)   |
| post_code               | `string` post code of the location                                                                                            |
| street                  | `string` the street name of the location without number                                                                       |
| street_number           | `string` the street number of the location                                                                                    |

### Parking Space Group Model
| Field                         | Description                                                                                                                                                                                                                          |
| -----------------             | --------------------------------------------------------------------------------------                                                                                                                                               |
| availability                  | `dictionary` describes the availability of the group in relation to the request                                                                                                                                                      |
| availability.current          | `number` the number of parking spaces available in the group for the requested time period defined by `start` and `end`                                                                                                              |
| availability.maximum          | `number` the overall number of parking spaces at this group                                                                                                                                                                          |
| availability.next_start       | `time` the start of the next from now slot in which a parking space in this group is free and bookable, can be in the past                                                                                                           |
| availability.next_end         | `time` the end of the next slot from now in which a parking space in this group is free and bookable, can be in the past                                                                                                             |
| description                   | `string` the description of the location. The description is returned in the users language or in the language specified by the HTTP header `Accept-Language` if it was given.                                                       |
| id                            | `uuid rfc4122` unique identifier of the location used for referencing.                                                                                                                                                               |
| image_urls                    | `list` urls of location images, can be **empty**                                                                                                                                                                                     |
| options                       | `list` describes which options are available at the location and can contains each of the following elements. The list can be **empty**.                                                                                             |
| options[excess length]        | the parking space can be used by cars with a small trailer                                                                                                                                                                           |
| options[indoor]               | the parking space has a roof or can be an underground garage                                                                                                                                                                         |
| options[disabled]             | parking space is accessible for disabled people                                                                                                                                                                                      |
| options[patio]                | the parking space is located at an inner courtyard                                                                                                                                                                                   |
| options[barrier]              | parking space has a barrier and user needs a smartphone to open it                                                                                                                                                                   |
| options[charging station]     | parking space with an electric vehicle charging station                                                                                                                                                                              |
| options[key_necessary]        | parking space can only be accessed with a key                                                                                                                                                                                        |
| options[long_term_booking]    | parking space is bookable for longer time period                                                                                                                                                                                     |
| options[surveillance]         | parking space has surveillance                                                                                                                                                                                                       |
| options[valet_service]        | parking space contains valet service                                                                                                                                                                                                 |
| price                         | `decimal` the actual price shown to the user, can be **null** if `start` or `end` were not provided                                                                                                                                  |
| price_period                  | `string` contains the period for how long the price is valid, can be `day`, `week`, `month`, `timeframe`, can be **null** if `start` or `end` was not provided                                                                       |
| pricing                       | `dictionary` contains information about the pricing and price prediction. It contains the keys                                                                                                                                       |
| pricing.rate_hourly           | `decimal` shows the price for per hour                                                                                                                                                                                               |
| pricing.rate_daily            | `decimal` shows the price per day                                                                                                                                                                                                    |
| pricing.rate_weekly           | `decimal` shows the price per week                                                                                                                                                                                                   |
| pricing.rate_monthly          | `decimal` shows the price per month                                                                                                                                                                                                  |
| provider                      | `string` names the parking space provider. Additional information(terms and conditions, logo, ...) about the provider can found be using the provider key from the field in [settings](/api/settings/)                               |
| required_fields               | `list` lists all additionally required fields when creating a booking for this location, can be **empty** if no fields are required. The field names correspond to the `booking.fields.*` entries in the settings endpoint which can |
|                               | be used for retrieving translated strings for these fields.                                                                                                                                                                          |
| settings                      | `dictionary` provides booking requirements for the location. The settings of a location are used in favor of the global settings that can be found in the settings endpoint.                                                         |
| settings.bookable_range_start | `number` start of the range wherein a booking is allowed in minutes from now.                                                                                                                                                        |
| settings.bookable_range_end   | `number` end of the range wherein a booking is allowed in minutes from now.                                                                                                                                                          |
| settings.booking_duration_min | `number` minimum duration of a booking in minutes.                                                                                                                                                                                   |
| settings.booking_duration_max | `number` maximum duration of a booking in minutes.                                                                                                                                                                                   |
| support                       | `dictionary` contains field `phone_number` that returns the support center phone number for this location                                                                                                                            |
| type                          | `string` describes the type of location and can be one of the following. Choices `off-street` `park-and-ride` `professional-garage` `airport-parking` `harbor-parking`                                                               |
| user_owned                    | `boolean` `true` if the user who requested the location is also the owner of the parking space. This allows to determine if the user could block the parking space from bookings. The blocking feature itself is not yet             |

### Cluster Model
A cluster contains meta information about the locations inside a specific area. The cluster itself contains 2 levels.
The first level groups the second level clusters that are given by the field `includes`.

First level clusters are great for display on maps as we make sure that those clusters have a certain distance to
each other.

Second level clusters are great for being displayed in a list as they all have a distinct name and a parent
city/country that can be used for grouping them. These clusters work on 3 predefined levels:
- postcode: contains only locations with same postcode
- city: contains only locations in same city
- country: contains only locations in same country
Which level is returned depends on the bounding box size of your request.

#### First Level Cluster Model
|      Field       |                                         Description                                         |
|------------------|---------------------------------------------------------------------------------------------|
| title            | `string` A presentable and translated title for the cluster. The content depends on `type`. |
| type             | `string` The type of cluster. __Choices__: `postcode` `city` `country`                      |
| count            | `number` The number of locations inside the cluster.                                        |
| center_latitude  | `float` Latitude of the cluster center.                                                     |
| center_longitude | `float` Longitude of the cluster center.                                                    |
| sw_latitude      | `float` South west corner latitude of the cluster bounding boxes.                           |
| sw_longitude     | `float` South west corner longitude of the cluster bounding boxes.                          |
| ne_latitude      | `float` North east corner latitude of the cluster bounding boxes.                           |
| ne_longitude     | `float` North east corner longitude of the cluster bounding boxes.                          |
| includes         | `list` List of second level clusters contained in this cluster.                             |

#### Second Level Cluster Model
|      Field       |                                               Description                                                |
|------------------|----------------------------------------------------------------------------------------------------------|
| title            | `string` A presentable and translated title for the cluster. The content depends on `type`.              |
| type             | `string` The type of cluster. __Choices__: `postcode` `city` `country`                                   |
| count            | `number` The number of locations inside the cluster.                                                     |
| center_latitude  | `float` Latitude of the cluster center.                                                                  |
| center_longitude | `float` Longitude of the cluster center.                                                                 |
| sw_latitude      | `float` South west corner latitude of the cluster bounding boxes.                                        |
| sw_longitude     | `float` South west corner longitude of the cluster bounding boxes.                                       |
| ne_latitude      | `float` North east corner latitude of the cluster bounding boxes.                                        |
| ne_longitude     | `float` North east corner longitude of the cluster bounding boxes.                                       |
| city             | `string` parent city the cluster belongs to, only shown if the cluster `type` is `postcode`              |
| country          | `string` parent country the cluster belongs to, only shown if the cluster `type` is `postcode` or `city` |

### Retrieve a Location [GET /locations/{location_id}{?date_start,date_end}]

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122, required) - Identifier of the location.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Used to calculate the price for a location.
        Requires the field `date_end` to be defined. If no `date_start` or `date_end` is specified,
        the returned `price` field will be `null`.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - see `date_start`.

+ Request

            $ curl https://parku.ch/{{apiversion}}/locations/00cd7cfd-e42d-11e2-8bf1-8a83f3373875 \
            ?date_start=2016-10-27T10:00:00+0000 \
            &date_end=2016-10-27T16:30:00+0000 \
            -u 6f1ed002ab5595859014ebf0951522d9:parku

    + Headers

            Authorization: Basic private_key:parku

+ Response 200

    See [Location Model](#header-location-model)

    + Body

            {
              "id": "0644e4bc-4c5c-11e4-a24a-d43d7eecedd2",
              "latitude": 52.60826,
              "longitude": 13.19988,
              "street": "Dorfstraße",
              "street_number": "11",
              "postcode": "16761",
              "city": "Hennigsdorf",
              "country": "Deutschland",
              "bookable": true,
              "parking_space_groups": [
                {
                  "id": "1644c5dc-4c5c-11e4-a24a-d43d7eecedd2",
                  "type": "off-street",
                  "code": null,
                  "description": "Doppelparkplatz. Jedoch nur für ein Auto zu vermieten. Die andere Hälfte wird benötigt. Aufteilung wie im Bild.",
                  "image_urls": [],
                  "options": [
                    "patio"
                  ],
                  "support": {
                    "phone_number": "+493012064329"
                  },
                  "price_period": "timeframe",
                  "pricing": {
                    "rate_hourly": 1,
                    "rate_daily": 10,
                    "rate_weekly": null,
                    "rate_monthly": null
                  },
                  "address_slug": "dorfstrasse-11",
                  "user_owned": false,
                  "settings": {
                    "bookable_range_start": -15,
                    "bookable_range_end": 43200,
                    "booking_duration_min": 30,
                    "booking_duration_max": 43200
                  },
                  "required_fields": [],
                  "provider": "parku"
                }
              ],
              "availability": {
                "current": 0,
                "maximum": 1,
                "next_start": null,
                "next_end": null
              }
            }

+ Response 404
Location was not found, check the location id and that your user has the correct access rights to see the location.
    + Body


+ Response 422
Request validation failed because the request data was malformed.
    + Body

### List Locations [GET /locations{?sw,ne,date_start,date_end,filter_available,filter_bookable,filter_type,filter_price,filter_properties,fields}]
Returns a list of locations that provide the same format as the single location.
When no `date_start` or `date_end` was provided, all locations are returned.
That does not mean, that they are available.

The parameters named `filter_*` filter the returned results using the following logic:
```
available
AND bookable
AND (type1 OR type2 OR ...)
AND (price1 OR price2 OR ...)
AND (properties1 AND properties2 AND ...)
```

+ Parameters
    + sw: `45.74001,5.67868` (string,required) - Comma separated latitude and longitude of the southwest position.
    + ne: `47.74236,10.24900` (string,required) - Comma separated latitude and longitude of the northeast position.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the start date.
        `date_start` will have no effect unless `date_end` is also provided.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the end date.
        `date_end` will have no effect unless `date_start` is also provided.
    + `filter_available`: true (boolean,optional) - Filters returned locations regarding their availability if start and
        end are also given.
        * `true` only returns available locations
            (this is default if availability is not specified and start and end were given)
        * `false` only returns non-available locations
        + Members
            + true
            + false
    + `filter_bookable`: true (boolean,optional) - Filters returned locations regarding their general bookability.
        * `true` only returns locations that could be booked through the api if they are available
        * `false` only returns locations that can not be booked through the api, even though they might be available
        + Members
            + true
            + false
    + `filter_type`: `airport-parking` (array[string],optional) - Filters the result to only show parking spaces with
        with either of the provided types.
        + Members
            + `off-street`
            + `park-and-ride`
            + `professional-garage`
            + `airport-parking`
            + `harbor-parking`
    + `filter_price`: `rate_hourly` (array[string],optional) - Filters the result to only show parking spaces with
        either of the provided rates.
        + Members
            + `rate_hourly`
            + `rate_daily`
            + `rate_weekly`
            + `rate_monthly`
    + `filter_properties`: `excess_length` (array[string],optional) - Filters the result to only show parking spaces
        all the provided properties.
        + Members
            + `excess_length`
            + `indoor`
            + `patio`
            + `disabled`
            + `charging_station`
            + `key_necessary`
            + `long_term_booking`
            + `surveillance`
            + `valet_service`
    + `fields`: `all` (array[string],optional) - Response will only contain the fields mentioned in this parameter.
        This can either be `all` or an comma separated list of field names from the response, e.g. `id,street,country`.

+ Request

            $ curl https://parku.ch/{{apiversion}}/locations \
            ?sw=45.74001,5.67868 \
            &ne=47.74236,10.24900 \
            &date_start=2016-10-27T10:00:00+0000 \
            &date_end=2016-10-27T16:30:00+0000 \
            &filter_available=true \
            &filter_bookable=true \
            &filter_type=off-street,airport-parking \
            &filter_price=rate_daily \
            &filter_properties=indoor,surveillance \
            $fields=all
            -u 6f1ed002ab5595859014ebf0951522d9:parku

    + Headers

            Authorization: Basic private_key:parku


+ Response 200

    |   Field   |                                                  Description                                                  |
    |-----------|---------------------------------------------------------------------------------------------------------------|
    | clusters  | Contains locations clusters grouping 2 or more locations together. See [Cluster Model](#header-cluster-model) |
    | locations | Contains locations that were not clustered. See [Locations Model](#header-location-model)                     |

    + Body

            {
                "clusters": [
                  {
                    "title": "13405",
                    "type": "postcode",
                    "count": 4,
                    "center_latitude": 52.528809357143,
                    "center_longitude": 13.379654547619,
                    "sw_latitude": 52.505681,
                    "sw_longitude": 13.285105,
                    "ne_latitude": 52.576979,
                    "ne_longitude": 13.47168,
                    "includes": [
                      {
                        "title": "10115",
                        "type": "postcode",
                        "count": 2,
                        "center_latitude": 52.5354003333,
                        "center_longitude": 13.3896063333,
                        "sw_latitude": 52.535261,
                        "sw_longitude": 13.380199,
                        "ne_latitude": 52.53547,
                        "ne_longitude": 13.39431,
                        "city": "Berlin",
                        "country": "Deutschland"
                      },
                      {
                        "title": "10117",
                        "type": "postcode",
                        "count": 2,
                        "center_latitude": 52.5170895,
                        "center_longitude": 13.3826421667,
                        "sw_latitude": 52.516775,
                        "sw_longitude": 13.381867,
                        "ne_latitude": 52.518662,
                        "ne_longitude": 13.386518,
                        "city": "Berlin",
                        "country": "Deutschland"
                      },
                    ]
                  },
                  ...
                ],
                "locations": [
                  {
                    "id": "e644e4bc-4c5c-11e4-a24a-d43d7eecedd2",
                    "latitude": 52.60826,
                    "longitude": 13.19988,
                    "street": "Dorfstraße",
                    "street_number": "11",
                    "postcode": "16761",
                    "city": "Hennigsdorf",
                    "country": "Deutschland",
                    "bookable": true,
                    "parking_spaces": [
                      {
                        "id": "e644c5dc-4c5c-11e4-a24a-d43d7eecedd2",
                        "type": "off-street",
                        "code": null,
                        "description": "Der Parkplatz ist auf dem Grundstück unserer Reihenhausanlage (orangene Klinker-Mauern). Es ist der letzte Stellplatz vor den Keller-Ersatzräumen (rotes Häuschen mit Schrägdach) zur Wasserseite. Zur Beetseite steht ein Holzregal.",
                        "image_urls": [],
                        "options": [
                          "patio"
                        ],
                        "support": {
                          "phone_number": "+493012064329"
                        },
                        "price_period": "timeframe",
                        "pricing": {
                          "rate_hourly": 1,
                          "rate_daily": 10,
                          "rate_weekly": null,
                          "rate_monthly": null
                        },
                        "address_slug": "dorfstrasse-11",
                        "user_owned": false,
                        "settings": {
                          "bookable_range_start": -15,
                          "bookable_range_end": 43200,
                          "booking_duration_min": 30,
                          "booking_duration_max": 43200
                        },
                        "required_fields": [],
                        "provider": "parku"
                      }
                    ],
                    "availability": {
                      "current": 0,
                      "maximum": 1,
                      "next_start": null,
                      "next_end": null
                    }
                  },
                  ...
                ]
              }


### Get availability times for location [GET /locations/{location_id}/availability{?date_start,date_end}]

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Start of time frame to include periods.
        If `date_start` is provided, `date_end` is required and vice versa.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - see `date_start`.

+ Request

            $ curl https://parku.ch/{{apiversion}}/locations/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/availability \
            ?date_start=2016-04-12 \
            &date_end=2016-04-14 \
            -u 6f1ed002ab5595859014ebf0951522d9:parku

    + Headers

            Authorization: Basic private_key:parku

+ Response 200
    Displays the availability times. For every affected availability period there will be one entry in the json.
    This sub json contains 9 keys, one for every weekday including the day's times and also the period start and end.

    __Caution__: This does not include bookings

    A period is affected, if one of the following holds:

    * `date_start` is between period start and period end
    * `date_end` is between period start and end
    * `date_start` and `date_end` overlay the period

    + Body

            {
                "begin": "2016-04-09T00:00:00+02:00",
                "end": "2016-04-18T00:00:00+02:00",
                "weekday_1": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_2": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_3": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_4": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_5": [{
                  "start": "08:00",
                  "end": "18:00"
                }],
                "weekday_6": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_7": [{
                  "start": "08:00",
                  "end": "17:00"
                }]
            }

### Retrieve Terms and Conditions [GET /locations/{location_id}/terms]

_Deprecated_ This endpoint is deprecated. `/settings` endpoint should be used instead.

Each location can have different terms and conditions.
With this endpoint you can retrieve location based terms and conditions.

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.

+ Request

            $ curl https://parku.ch/{{apiversion}}/locations/00cd7cfd-e42d-11e2-8bf1-8a83f3373875/terms \
            -u 6f1ed002ab5595859014ebf0951522d9:parku

    + Headers

            Authorization: Basic private_key:parku

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
              <html xmlns="http://www.w3.org/1999/xhtml"...
