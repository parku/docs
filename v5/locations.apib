# Group Locations
Access needs at least a __public key__.

## Locations [/locations]
The [location model](#location-model) contains the directly location related information (e.g. street and city)
as well as one or more parking space groups.

A [parking space group](#parking-space-group-model) is a group of parking spaces with similar properties.
Bookings are made using parking space group ids.

The [location list](#list-locations) can cover a large number of locations in its response. In order to
keep the responses reasonably fast and small that request will return a mix of locations and clusters.
A [location cluster](#first-level-cluster-model) contains information about how many locations are in a certain area.

+ Attributes
    + `Locations and Clusters Model` (Locations and Clusters)
    + `First Level Cluster Model` (First Level Cluster)
    + `Second Level Cluster Model` (Second Level Cluster)
    + `Location Model` (Location)
    + `Parking Space Group Model` (Parking Space Group)
    + `Availability Model` (Availability)

### Retrieve a Location [GET /locations/{location_id}{?date_start,date_end}]

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122, required) - Identifier of the location.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Used to calculate the price for a location.
        Requires the field `date_end` to be defined. If no `date_start` or `date_end` is specified,
        the returned `price` field will be `null`.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - see `date_start`.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    See [Location Model](#header-location-model)
    + Attributes (Location)

+ Response 404
Location was not found, check the location id and that your user has the correct access rights to see the location.
    + Body


+ Response 422
Request validation failed because the request data was malformed.
    + Body

### List Locations [GET /locations{?sw,ne,date_start,date_end,filter_available,filter_bookable,filter_type,filter_price,filter_properties,fields}]
Returns a list of locations that provide the same format as the single location.
When no `date_start` or `date_end` was provided, all locations are returned.
That does not mean, that they are available.

The parameters named `filter_*` filter the returned results using the following logic:
```
available
AND bookable
AND (type1 OR type2 OR ...)
AND (price1 OR price2 OR ...)
AND (properties1 AND properties2 AND ...)
```

+ Parameters
    + sw: `45.74001,5.67868` (string,required) - Comma separated latitude and longitude of the southwest position.
    + ne: `47.74236,10.24900` (string,required) - Comma separated latitude and longitude of the northeast position.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the start date.
        `date_start` will have no effect unless `date_end` is also provided.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - Filter parking spaces for the end date.
        `date_end` will have no effect unless `date_start` is also provided.
    + `filter_available`: true (boolean,optional) - Filters returned locations regarding their availability if start and
        end are also given.
        * `true` only returns available locations
            (this is default if availability is not specified and start and end were given)
        * `false` only returns non-available locations
        + Members
            + true
            + false
    + `filter_bookable`: true (boolean,optional) - Filters returned locations regarding their general bookability.
        * `true` only returns locations that could be booked through the api if they are available
        * `false` only returns locations that can not be booked through the api, even though they might be available
        + Members
            + true
            + false
    + `filter_type`: `airport-parking` (array[string],optional) - Filters the result to only show parking spaces with
        with either of the provided types.
        + Members
            + `off-street`
            + `park-and-ride`
            + `professional-garage`
            + `airport-parking`
            + `harbor-parking`
    + `filter_price`: `rate_hourly` (array[string],optional) - Filters the result to only show parking spaces with
        either of the provided rates.
        + Members
            + `rate_hourly`
            + `rate_daily`
            + `rate_weekly`
            + `rate_monthly`
    + `filter_properties`: `excess_length` (array[string],optional) - Filters the result to only show parking spaces
        all the provided properties.
        + Members
            + `excess_length`
            + `indoor`
            + `patio`
            + `disabled`
            + `charging_station`
            + `key_necessary`
            + `long_term_booking`
            + `surveillance`
            + `valet_service`
    + `fields`: `all` (array[string],optional) - Response will only contain the fields mentioned in this parameter.
        This can either be `all` or an comma separated list of field names from the response, e.g. `id,street,country`.

+ Request (application/x-www-form-urlencode)
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1


+ Response 200 (application/json)
    + Attributes (Locations and Clusters)

### Get availability times for location [GET /locations/{location_id}/availability{?date_start,date_end}]

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.
    + `date_start`: 2016-10-27T09:10:20+00:00 (ISO 8601, optional) - Start of time frame to include periods.
        If `date_start` is provided, `date_end` is required and vice versa.
    + `date_end`: 2016-10-27T10:10:20+00:00 (ISO 8601, optional) - see `date_start`.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200
    Displays the availability times. For every affected availability period there will be one entry in the json.
    This sub json contains 9 keys, one for every weekday including the day's times and also the period start and end.

    __Caution__: This does not include bookings

    A period is affected, if one of the following holds:

    * `date_start` is between period start and period end
    * `date_end` is between period start and end
    * `date_start` and `date_end` overlay the period

    + Body

            {
                "begin": "2016-04-09T00:00:00+02:00",
                "end": "2016-04-18T00:00:00+02:00",
                "weekday_1": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_2": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_3": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_4": [{
                  "start": "08:00",
                  "end": "16:00"
                }],
                "weekday_5": [{
                  "start": "08:00",
                  "end": "18:00"
                }],
                "weekday_6": [{
                  "start": "08:00",
                  "end": "17:00"
                }],
                "weekday_7": [{
                  "start": "08:00",
                  "end": "17:00"
                }]
            }

### Retrieve Terms and Conditions [GET /locations/{location_id}/terms]

_Deprecated_â€¨This endpoint is deprecated. `/settings` endpoint should be used instead.

Each location can have different terms and conditions.
With this endpoint you can retrieve location based terms and conditions.

+ Parameters
    + `location_id`: `00cd7cfd-e42d-11e2-8bf1-8a83f3373875` (uuid rfc4122,required) - Identifier of the location.

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/xhtml+xml)
    + Body

            <!DOCTYPE html>
              <html xmlns="http://www.w3.org/1999/xhtml"...

# Data Structures
## Locations and Clusters (object)
+ clusters (array[First Level Cluster]) -
    A cluster contains meta information about the locations inside a specific area. The cluster itself contains 2 levels.
    The first level groups the second level clusters that are given by the field `includes`.

    First level clusters are great for display on maps as we make sure that those clusters have a certain distance to
    each other.

    Second level clusters are great for being displayed in a list as they all have a distinct name and a parent
    city/country that can be used for grouping them. These clusters work on 3 predefined levels:
        - postcode: contains only locations with same postcode
        - city: contains only locations in same city
        - country: contains only locations in same country
    Which level is returned depends on the bounding box size of your request.
+ locations (array[Location])

## First Level Cluster (object)
+ title: `13405` (string)A presentable and translated title for the cluster. The content depends on `type`.
+ type: `postcode` (enum)The type of cluster.
    + Members
        + postcode
        + city
        + country
+ count: 4 (number) - The number of locations inside the cluster.
+ `center_latitude`: `52.528809357143` (number) - Latitude of the cluster center.
+ `center_longitude`: 13.379654547619 (number) - Longitude of the cluster center.
+ `sw_latitude`: 52.505681 (number) - South west corner latitude of the cluster bounding boxes.
+ `sw_longitude`: 13.285105 (number) - South west corner longitude of the cluster bounding boxes.
+ `ne_latitude`: 52.576979 (number) - North east corner latitude of the cluster bounding boxes.
+ `ne_longitude`: 13.47168 (number) - North east corner longitude of the cluster bounding boxes.
+ includes (array[Second Level Cluster]) - List of second level clusters contained in this cluster.

## Second Level Cluster (object)
+ title: `10115` (string)A presentable and translated title for the cluster. The content depends on `type`.
+ type: `postcode` (enum)The type of cluster.
    + Members
        + postcode
        + city
        + country
+ count: 4 (number) - The number of locations inside the cluster.
+ `center_latitude`: `52.528809357143` (number) - Latitude of the cluster center.
+ `center_longitude`: 13.379654547619 (number) - Longitude of the cluster center.
+ `sw_latitude`: 52.505681 (number) - South west corner latitude of the cluster bounding boxes.
+ `sw_longitude`: 13.285105 (number) - South west corner longitude of the cluster bounding boxes.
+ `ne_latitude`: 52.576979 (number) - North east corner latitude of the cluster bounding boxes.
+ `ne_longitude`: 13.47168 (number) - North east corner longitude of the cluster bounding boxes.
+ `city`: `Berlin` (string) - parent city the cluster belongs to, only shown if the cluster `type` is `postcode`
+ `country`: `Deutschland` (string) - parent country the cluster belongs to, only shown if the cluster `type` is `postcode` or `city`

## Location (object)
+ `id`: `e644e4bc-4c5c-11e4-a24a-d43d7eecedd2` (string) - unique identifier of the location used for referencing.
+ `address_slug`: `dorfstrasse-11` (string)street name and number of the location in url address format
+ `latitude`: `52.60826` (number) - latitude part of the location geo coordinate
+ `longitude`: `13.19988` (number) - longitude part of the location geo
+ `street`: `DorfstraÃŸe` (string) - the street name of the location without number
+ `street_number`: `11` (string) - the street number of the location
+ `postcode`: `16761` (string) - post code of the location
+ `city`: `Hennigsdorf` (string) - city of the location
+ `country`: `Deutschland` (string) - country of the location in 2 character encoding  country of the location in 2
    character encoding
+ `bookable`: `true` (boolean) -  `true` if that locations can be booked via the parku API, `false` if the location
    is purely providing information
+  payment (object) - available payment methods and types for the current user in this location. The payment methods and types depend on the private key of the logged in user. For locations requests using public keys these arrays will be empty.
    + methods (array) - Possible payment methods for this location and user
        + (enum)
            + paypal
            + credits
            + coupon
            + braintree
            + ideal
    + types (array) - Possible payment types for this location and user
        + (enum)
            + post
            + immediate
+ availability (Availability) - describes the availability of the location in relation to the request
+ `parking_space_groups` (array[Parking Space Group]) - different parking space groups for this location. See [Parking Space Group Data](#header-parking-space-group-data)
+ gates (array[Gate]) - the gates connected to the location

## Gate (object)
+ type: `qrcode` (enum) - the type how the gate can be opened
    + Members
        + qrcode
        + beacon
+ identifier: `PARKU3KU` (string) - the identifier for the access method, a short identification string for `qrcode` and the bluetooth id for `beacon`
+ gateways (array[Gateway])

## Gateway (object)
+ type: `api` (enum) - the type of gateway
    + Members
        + api
        + box
+ name: `PRK-123` (string) - the name of the box if `type` is `box`

## Parking Space Group (object)
+ `id`: `1644c5dc-4c5c-11e4-a24a-d43d7eecedd2` - unique identifier of the location used for referencing.
+ `type`: `off-street` (enum) - describes the type of location and can be one of the following.
    + Members
        + `off-street`
        + `park-and-ride`
        + `professional-garage`
        + `airport-parking`
        + `harbor-parking`
+ `description`: `Doppelparkplatz. Jedoch nur fÃ¼r ein Auto zu vermieten. Die andere HÃ¤lfte wird benÃ¶tigt. Aufteilung wie im Bild.` (string)
+ `image_urls`: `https://parku.de/images/parkingspace/020a81f5-c8b9-11e4-bfd2-d43d7eece658/640x286.jpg` (array[string]) - urls of location images, can be **empty**
+ `options` (array) - describes which options are available at the location and can contains each of the following elements. The list can be **empty**.
    + (enum)
      + `excess length` - the parking space can be used by cars with a small trailer
      + indoor - the parking space has a roof or can be an underground garagethe parking space has a roof or can be an underground garage
      + disabled - parking space is accessible for disabled peopleI
      + patio - the parking space is located at an inner courtyard the parking space is located at an inner courtyard
      + barrier - parking space has a barrier and user needs a smartphone to open it parking space has a barrier and user needs a smartphone to open it
      + `charging station` - parking space with an electric vehicle charging station
      + `key_necessary` - parking space can only be accessed with a keyparking space can only be accessed with a key
      + `long_term_booking` - parking space is bookable for longer time period
      + `surveillance` - parking space has surveillance
      + `valet_service` - parking space contains valet serviceparking space contains valet service
+ `support` (object)
    + `phone_number`: `+493012064329` - returns the support center phone number for this location
+ `price_period`: `timeframe` (enum) - contains the period for how long the price is valid, can be **null** if `start` or `end` was not provided
    + Members
      + timeframe
      + day
      + week
      + month
+ `pricing` (object) - contains information about the pricing and price prediction.
    + `rate_hourly`: 1 (number) - shows the price for per hour
    + `rate_daily`: 10 (number) - shows the price per day
    + `rate_weekly`: 30 (number) - shows the price per week
    + `rate_monthly`: 150 (number) - shows the price per month
+ `user_owned`: false (boolean) - `true` if the user who requested the location is also the owner of the parking space. This allows to determine if the user could block the parking space from bookings.
+ `settings` (object) - provides booking requirements for the location. The settings of a location are used in favor of the global settings that can be found in the settings endpoint.
    + `bookable_range_start`: `-15` (number) - start of the range wherein a booking is allowed in minutes from now.
    + `bookable_range_end`: 43200 (number) - end of the range wherein a booking is allowed in minutes from now. end of the range wherein a booking is allowed in minutes from now.
    + `booking_duration_min`: 30 (number) - minimum duration of a booking in minutes.
    + `booking_duration_max`: 43200 (number) - maximum duration of a booking in minutes.
+ `required_fields` (array) - lists all additionally required fields when creating a booking for this location, can be **empty** if no fields are required. The field names correspond to the `booking.fields.*` entries in the settings endpoint which can be used for retrieving translated strings for these fields.
    + (enum)
        + car_registration_number
        + car_make
        + car_model
        + car_colour
        + number_of_passengers
        + car_dropoff_time
        + car_pickup_time
        + outbound_flight_terminal
        + outbound_flight_number
        + inbound_flight_number
        + outbound_flight_time
        + inbound_flight_time
        + user_mobile_number
        + ship_name
        + pier_name
        + child_seat_required
        + additional_services
        + inbound_flight_terminal
+ provider: parku (enum) - names the parking space provider. Additional information(terms and conditions, logo, ...) about the provider can found be using the provider key from the field in [settings](/api/settings/)
    + Members
        + parku
        + holidayextras
        + inrix
+ availability (Availability) - describes the availability of the group in relation to the requestdescribes the
    availability of the group in relation to the request

## Availability (object)
+ `current`: 0 (number) - the number of parking spaces available in the group for the requested time period defined
    by `start` and `end`the number of parking spaces available in the group for the requested time period defined by
    `start` and `end`
+ `maximum`: 1 (number) - the overall number of parking spaces at this group the overall number of parking spaces at
    this group
+ `next_start`: `2016-...15:00:..` (string) - the start of the next from now slot in which a parking space in this
    group is free and bookable, can be in the past
+ `next_end`: `2016-...15:00:..` (string) - the end of the next slot from now in which a parking space in this group
    is free and bookable, can be in the past
