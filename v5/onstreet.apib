# Group Onstreet

## Onstreet [/onstreet]

### Retrieve Onstreet Zone Information [GET /onstreet{?lat,lon}]
Access needs at least a __public key__.

This request returns parking zone information about a specific point on the map.

+ Parameters
    + lat: 53.12341234 (number,required) - latitude of the requested point
    + lon: 13.12341234 (number,required) - longitude of the requested point

+ Request
    + Headers

            Authorization: Basic MDEyMzQ1Njc4YWJjZGVmOnBhcmt1

+ Response 200 (application/json)
    + Attributes (Onstreet)

### Start an Onstreet Booking [POST /onstreet/start]
Access needs at least a __private key__.

Bookings can be stopped using the [Stop a Booking](#stop-a-booking) action.

The request requires some of the values that were received by the
[Retrieve Onstreet Zone Information](#retrieve-onstreet-zone-information) request.
These values are checked against the booking that is started with the onstreet provider to ensure that the pricing
is as expected. The optional attributes of the parking zone object here are mainly used for logging.

+ Request (application/json)
    + Attributes
        + `zone` (Parking Zone, required) - the parking zone object to start the booking on
        + `payment_method` (Payment Method Input) - information about payment method.
        + `license_plate`: `AB 1234` (string, required) - the license plate of the car used for parking
        + `phone_number`: `01234567890` (string, required) - the customer phone number
        + `start`: `2009-06-30T18:30:00+02:00` (string, required) - the start date of the booking
        + `duration`: `15` (number, optional) - the parking duration, some locations require them.

+ Response 201 (application/json)
    Returned if a booking was created
    + Attributes (Parking Zone Booking)

+ Response 404
Returned if parking zone was not found, or it is already booked.
    + Body

+ Response 422
Returned if either one of the provided zone fields didn't match or the payment information was not processable.
    + Body

# Data Structures
## Parking Zone (object)
+ id: `101012` (string, required) - the parking zone id
+ name: `Berlin 101012` (string, optional) - the parking space zone name
+ latitude: 53.12341234 (number, required) - latitude of the requested point
+ longitude: 13.12341234 (number, required) - longitude of the requested point
+ hours: `Mon-Fri, 08:00 - 22:30` (string, optional) - the translated availability time in this zone
+ price (Zone Price, required) - information about the price for this zone
+ max_datetime_end: `2009-06-30T18:30:00+02:00` (string, optional) - datetime when a booking has to end
+ duration_max: `2.0 hours` (string, optional) - translated string of maximum general parking duration.
+ `possible_durations`: 15,30,45 (array[number], optional) - array containing the possible parking durations.

## Zone Price (object)
+ `free_minutes`: `30` (number, required) - number of free minutes at the interval's beginning.
+ `unit_cost`: `5` (number, required) - cost per unit time(which is defined by `unit_interval_minutes`).
    `unit_cost` is a value in floating point format as suggested by `IEEE 754` with the base `unit_base` and exponent
    `unit_exponent`. The actual cost in the currency is calculated using `unit_cost * unit_base ^ unit_exponent`.
+ `unit_interval_minutes`: `3` (number, required) - how many minutes one unit is
+ `unit_base`: `10` (number, required) - base of the unit_cost
+ `unit_exponent` `-2` (number, required) - exponent of the unit cost
+ `currency`: EUR (enum, required) - the currency of the price
    + Members
      + EUR
      + CHF

## Onstreet (object)
+ zone (Parking Zone) - the zone that was booked.
+ payment_method (Payment Method Input)- used payment method.
